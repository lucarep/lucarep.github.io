<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Luke&#39;s Statistics Blog</title>
    <link>https://lucarep.github.io/post/</link>
    <description>Recent content in Posts on Luke&#39;s Statistics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2021 Luca Repechini</copyright>
    <lastBuildDate>Wed, 27 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://lucarep.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5_RA</title>
      <link>https://lucarep.github.io/post/5_ra/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/5_ra/</guid>
      <description>Table of Contents
 WHAT IS A RANDOM VARIABLE? WHY THEY ARE IMPORTANT? HOW WE CAN GENERATE RANDOM NUMBERS? PSEUDO RANDOM TRUE RANDOM UNIFORM RANDOM GENERATOR - Credits  WHAT IS A RANDOM VARIABLE? Informally is a variable that is described as a variable whose values depend on outcomes of a random phenomenon. In formal a random variable is understood as a measurable function defined on a probability space that maps from the sample space to the real numbers.</description>
      <content>&lt;p&gt;Table of Contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-a-random-variable&#34;&gt;WHAT IS A RANDOM VARIABLE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-they-are-important&#34;&gt;WHY THEY ARE IMPORTANT?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-we-can-generate-random-numbers&#34;&gt;HOW WE CAN GENERATE RANDOM NUMBERS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pseudo-random&#34;&gt;PSEUDO RANDOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#true-random&#34;&gt;TRUE RANDOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uniform-random-generator&#34;&gt;UNIFORM RANDOM GENERATOR&lt;/a&gt;
- &lt;a href=&#34;#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-is-a-random-variable&#34;&gt;WHAT IS A RANDOM VARIABLE?&lt;/h1&gt;
&lt;p&gt;Informally is a variable that is described as a variable whose values depend on outcomes of a random phenomenon. In formal a random variable is understood as a measurable function defined on a probability space that maps from the sample space to the real numbers.
So the random variable is defined as a function, that must be measurable, which performs the mapping of the outcomes of a random process to a numeric value. Also, keep in mind that random variables can be both discrete or continuous.&lt;/p&gt;
&lt;h1 id=&#34;why-they-are-important&#34;&gt;WHY THEY ARE IMPORTANT?&lt;/h1&gt;
&lt;p&gt;Up until now we have always discussed problems where you made observations and then collected data, why do we now need random numbers? Well, there is a large class of experimental problems that require a large number of random digits and normal deviates of high quality. These applications are called Monte Carlo methods.&lt;/p&gt;
&lt;h1 id=&#34;how-we-can-generate-random-numbers&#34;&gt;HOW WE CAN GENERATE RANDOM NUMBERS?&lt;/h1&gt;
&lt;p&gt;For a person, generating a random number is quite trivial, however for a computer there is no such concept, in this sense there are two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pseudo Random Number Generator (PRNG)&lt;/li&gt;
&lt;li&gt;True Random Number Generator (TRNG)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;pseudo-random&#34;&gt;PSEUDO RANDOM&lt;/h1&gt;
&lt;p&gt;Software-generated random numbers only are pseudorandom. They are not truly random because the computer uses an algorithm based on a distribution, and are not secure because they rely on deterministic, predictable algorithms. Since a seed number can be set to replicate the “random” numbers generated, it is possible to predict the numbers if the seed is known. Pseudorandom number generation in everyday tools such as Python and Excel are based on the Mersenne Twister algorithm.&lt;/p&gt;
&lt;p&gt;An example use of PRNGs is in key stream generation. Stream ciphers, such as Chacha, encrypt plaintext messages by applying an encryption algorithm with a pseudorandom cipher digit stream (keystream). Keystreams of some block cipher modes, such as AES CTR (counter) mode, act as a stream cipher and can also be regarded as pseudorandom number generation.&lt;/p&gt;
&lt;h1 id=&#34;true-random&#34;&gt;TRUE RANDOM&lt;/h1&gt;
&lt;p&gt;For truly random numbers, the computer must use some external physical variable that is unpredictable, such as radioactive decay of isotopes or airwave static, rather than by an algorithm. At the quantum level, subatomic particles have completely random behavior, making them ideal variables of an unpredictable system. Most higher end microcontrollers have TRNG sources, which wolfSSL can use as a direct random source or as a seed for our PRNG. Intel RDRAND, a silicon-based TRNG, is supported by wolfSSL. he problem with them was the bandwidth - the amount of entropy they could generate wasn&amp;rsquo;t very high so they were used for seeds of pseudorandom algorithms.&lt;/p&gt;
&lt;h1 id=&#34;uniform-random-generator&#34;&gt;UNIFORM RANDOM GENERATOR&lt;/h1&gt;
&lt;p&gt;The binomial distribution with parameters n and p is the discrete probability distribution of the number of successes in a sequence of n independent experiments, each asking a yes–no question, and each with its own Boolean-valued outcome: success/yes (with probability p) or failure/no(with probability q = 1 − p).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pseudo_binomial&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    binom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(size):
        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perf_counter()
        seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;float(str(t&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;int(t))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:]))
        U &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pseudo_uniform(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n,seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;seed)
        Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (U &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; p)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)
        binom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(Y))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; binom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Bernoulli distribution, (a special case of the binomial distribution where a single trial is conducted (so n would be 1 for such a binomial distribution)).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pseudo_bernoulli&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perf_counter()
    seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;float(str(t&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;int(t))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:]))
    B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pseudo_uniform(seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;seed,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;size)
    B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (B&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;p)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time or space if these events occur with a known constant mean rate and independently of the time since the last event. The Poisson distribution can also be used for the number of events in other specified intervals such as distance, area or volume.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pseudo_poisson&lt;/span&gt;(alpha,size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    poisson &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(size):
        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perf_counter()
        seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;float(str(t&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;int(t))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:]))
        U &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pseudo_uniform(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;alpha,seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;seed)
        X,P,i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; P &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alpha):
            P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; U[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;P
            x&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        poisson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(X)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(poisson)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wolfssl.com/true-random-vs-pseudorandom-number-generation/&#34;&gt;https://www.wolfssl.com/true-random-vs-pseudorandom-number-generation/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/109724/how-do-random-number-generators-work&#34;&gt;https://softwareengineering.stackexchange.com/questions/109724/how-do-random-number-generators-work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/how-to-generate-random-variables-from-scratch-no-library-used-4b71eb3c8dc7&#34;&gt;https://towardsdatascience.com/how-to-generate-random-variables-from-scratch-no-library-used-4b71eb3c8dc7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>7_R : BAYES&#39; THEOREM</title>
      <link>https://lucarep.github.io/post/7_r/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/7_r/</guid>
      <description>Table of Contents
 INTRO - BUT, WHY? A BIT OF MATH AN EXAMPLE: NOW, BACK TO SEARCH ENGINES. BAYESIAN VS FREQUENTIST - LET&amp;rsquo;S SEE WHY - Credits  INTRO Bayes&#39; Theorem, is certainly one of the most important ever discovered, the reason, is that even today we use it in many different areas. Take for example a common search on the internet: &amp;ldquo;movie automatic shoe laces&amp;rdquo; the search engine will show us results also of the movie &amp;ldquo;Back to the Future&amp;rdquo;.</description>
      <content>&lt;p&gt;Table of Contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;INTRO&lt;/a&gt;
- &lt;a href=&#34;#but-why&#34;&gt;BUT, WHY?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-bit-of-math&#34;&gt;A BIT OF MATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-example&#34;&gt;AN EXAMPLE:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#now-back-to-search-engines&#34;&gt;NOW, BACK TO SEARCH ENGINES.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bayesian-vs-frequentist&#34;&gt;BAYESIAN VS FREQUENTIST&lt;/a&gt;
- &lt;a href=&#34;#lets-see-why&#34;&gt;LET&amp;rsquo;S SEE WHY&lt;/a&gt;
- &lt;a href=&#34;#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;intro&#34;&gt;INTRO&lt;/h1&gt;
&lt;p&gt;Bayes&#39; Theorem, is certainly one of the most important ever discovered, the reason, is that even today we use it in many different areas. Take for example a common search on the internet:
&amp;ldquo;movie automatic shoe laces&amp;rdquo;
the search engine will show us results also of the movie &amp;ldquo;Back to the Future&amp;rdquo;.&lt;/p&gt;
&lt;h5 id=&#34;but-why&#34;&gt;BUT, WHY?&lt;/h5&gt;
&lt;p&gt;I mean, the search engine doesn&amp;rsquo;t look at the movie, right? Well yes, but actually no, in the sense, it knows because many others have previously watched it and then analyzes the previous queries to understand what others are probably looking for, all this is calculated thanks to Bayes&#39; Theorem&lt;/p&gt;
&lt;h1 id=&#34;a-bit-of-math&#34;&gt;A BIT OF MATH&lt;/h1&gt;
&lt;p&gt;Bayes&#39; Theorem is a way of finding a probability when we know certain other probabilities. The formula is:
$$ P(A|B) = \frac{P(A)P(B|A)}{P(B)}$$&lt;/p&gt;
&lt;p&gt;Which tells us:
how often A happens given that B happens, written P(A|B)&lt;/p&gt;
&lt;p&gt;When we know:
how often B happens given that A happens, written P(B|A), and how likely A is on its own, written P(A)
and how likely B is on its own, written P(B)&lt;/p&gt;
&lt;h1 id=&#34;an-example&#34;&gt;AN EXAMPLE:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;dangerous fires are rare (1%)&lt;/li&gt;
&lt;li&gt;but smoke is fairly common (10%) due to barbecues&lt;/li&gt;
&lt;li&gt;and 90% of dangerous fires make smoke&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can then discover the probability of dangerous Fire when there is Smoke:
$$ P(Fire|Smoke) = \frac{P(Fire)P(Smoke|Fire)}{P(Smoke)} = \frac{0.01 \cdot 0.9}{0.1} = 0.09$$&lt;/p&gt;
&lt;p&gt;So it is still worth checking out any smoke to be sure.&lt;/p&gt;
&lt;h1 id=&#34;now-back-to-search-engines&#34;&gt;NOW, BACK TO SEARCH ENGINES.&lt;/h1&gt;
&lt;p&gt;Search Engines take this idea and scale it up a lot (plus some other tricks).
It makes them look like they can read your mind!
It can also be used for mail filters, music recommendation services and more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;now you can guess why it is so important, but to be explicit, we can say that it allows us to draw conclusions about the population by knowing the sample.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;bayesian-vs-frequentist&#34;&gt;BAYESIAN VS FREQUENTIST&lt;/h1&gt;
&lt;p&gt;We begin our study with a simple question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability that the coin in my palm is heads?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the coin lands I already know the answer, but you still don&amp;rsquo;t, the answer you give will tell us if you are more inclined towards Bayesian or Frequentist thinking.&lt;/p&gt;
&lt;h5 id=&#34;lets-see-why&#34;&gt;LET&amp;rsquo;S SEE WHY&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Frequentist: “There’s no probability about it. I may not know the answer, but that doesn’t change the fact that if the coin is heads up, the probability is 100%, and if the coin is tails up, the probability is 0%.”&lt;/li&gt;
&lt;li&gt;Bayesian: “For me, the probability is 50%! For you, it’s whatever it is for you.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can summarize the above, with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frequentist: The parameter is not a random variable.&lt;/li&gt;
&lt;li&gt;Bayesian: The parameter is a random variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s look at another example that I think is very clear:&lt;/p&gt;
&lt;p&gt;Imagine this situation, I&amp;rsquo;m at home and I misplace my phone, to find it I use the app to make it beeping and the phone starts doing it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frequentist Reasoning: I can hear the phone beeping. I also have a mental model which helps me identify the area from which the sound is coming. Therefore, upon hearing the beep, I infer the area of my home I must search to locate the phone&lt;/li&gt;
&lt;li&gt;Bayesian Reasoning: I can hear the phone beeping. Now, apart from a mental model which helps me identify the area from which the sound is coming from, I also know the locations where I have misplaced the phone in the past. So, I combine my inferences using the beeps and my prior information about the locations I have misplaced the phone in the past to identify an area I must search to locate the phone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mathsisfun.com/data/bayes-theorem.html&#34;&gt;https://www.mathsisfun.com/data/bayes-theorem.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/statistics-are-you-bayesian-or-frequentist-4943f953f21b&#34;&gt;https://towardsdatascience.com/statistics-are-you-bayesian-or-frequentist-4943f953f21b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.stackexchange.com/questions/22/bayesian-and-frequentist-reasoning-in-plain-english&#34;&gt;https://stats.stackexchange.com/questions/22/bayesian-and-frequentist-reasoning-in-plain-english&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>6_R</title>
      <link>https://lucarep.github.io/post/6_r/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/6_r/</guid>
      <description>Table of Contents
 INTRO REAL WORLD EXAMPLES - BUT, WHY? WHAT ROLE DO PROBABILITY DISTRIBUTIONS PLAY IN STATISTICAL INFERENCE? SOME EXAMPLES: - Credits  INTRO When we collect data, we often also collect errors so, this implies some sort of chance or random variation, in this, probability plays a fundamental role, so it is important to understand how to apply it
REAL WORLD EXAMPLES As we can imagine from the initial premise, statistics and probability are broadly related.</description>
      <content>&lt;p&gt;Table of Contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;INTRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-world-examples&#34;&gt;REAL WORLD EXAMPLES&lt;/a&gt;
- &lt;a href=&#34;#but-why&#34;&gt;BUT, WHY?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-role-do-probability-distributions-play-in-statistical-inference&#34;&gt;WHAT ROLE DO PROBABILITY DISTRIBUTIONS PLAY IN STATISTICAL INFERENCE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some-examples&#34;&gt;SOME EXAMPLES:&lt;/a&gt;
- &lt;a href=&#34;#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;intro&#34;&gt;INTRO&lt;/h1&gt;
&lt;p&gt;When we collect data, we often also collect errors so, this implies some sort of chance or random variation, 
in this, &lt;strong&gt;probability&lt;/strong&gt; plays a fundamental role, so it is important to understand how to apply it&lt;/p&gt;
&lt;h1 id=&#34;real-world-examples&#34;&gt;REAL WORLD EXAMPLES&lt;/h1&gt;
&lt;p&gt;As we can imagine from the initial premise, statistics and probability are broadly related. Take for example a scientist who performs a measurement, the result of this measurement has a certain amount of chance associated with it.&lt;/p&gt;
&lt;h5 id=&#34;but-why&#34;&gt;BUT, WHY?&lt;/h5&gt;
&lt;p&gt;Well, we consider for example electrical noise in the instrumentation used, small fluctuations in environmental conditions and also human error. The scientist therefore, cannot expect to receive the same result from measurements in every case, even an anthropologist when considering a small group of people compared to a large population, will have some random variations that must be taken into account in the study.&lt;/p&gt;
&lt;h1 id=&#34;what-role-do-probability-distributions-play-in-statistical-inference&#34;&gt;WHAT ROLE DO PROBABILITY DISTRIBUTIONS PLAY IN STATISTICAL INFERENCE?&lt;/h1&gt;
&lt;p&gt;Randomization is important for collecting data, the idea that the possible observations are known but it&amp;rsquo;s yet unknown which possibility will prevail. What will happen, depends on probability. The probability is the proportion of the number of times that a certain observation is prevalent in a long sequence of similar observations. The fact that the sequence is long, is important, because the longer the sequence, the more accurate the probability. Then the sample proportion becomes more like the population proportion. Probabilities can also be measured in percentages (such as 70%) instead of proportions (such as 0.7). A specific branch within statistics deals with subjective probabilities, called &lt;strong&gt;Bayesian statistics&lt;/strong&gt;. However, most of statistics is about regular probabilities.
A probability is written like P(A), where P is the probability and A is an outcome. If two outcomes are possible and they exclude each other, then the chance that B happens is 1- P(A).&lt;/p&gt;
&lt;h1 id=&#34;some-examples&#34;&gt;SOME EXAMPLES:&lt;/h1&gt;
&lt;p&gt;magine research about people&amp;rsquo;s favorite colors, whether this is mostly red and blue. Again the assumption is made that the possibilities exclude each other without overlapping. The chance that someone&amp;rsquo;s favorite color is red (A) or blue (B), is P(A of B) = P (A) + P (B).
Next, imagine research that encompasses multiple questions. The research seeks to investigate how many married people have kids. Then you can multiply the chance that someone is married (A) with the chance that someone has kids (B).The formula for this is: P(A and B) = P(A) * P(B if also A). Because there is a connection between A and B, this is called a conditional probability.&lt;/p&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.universalclass.com/articles/math/what-is-probability-in-statistics.htm&#34;&gt;https://www.universalclass.com/articles/math/what-is-probability-in-statistics.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.worldsupporter.org/en/chapter/65146-what-role-do-probability-distributions-play-statistical-inference-chapter-4&#34;&gt;https://www.worldsupporter.org/en/chapter/65146-what-role-do-probability-distributions-play-statistical-inference-chapter-4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>5_R</title>
      <link>https://lucarep.github.io/post/5_r/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/5_r/</guid>
      <description>INTRODUCTION TO CENTRAL TENDENCY A measure of central tendency is a single value that attempts to describe a set of data by identifying the central position within that set of data. As such, measures of central tendency are sometimes called measures of central location. They are also classed as summary statistics. The mean (often called the average) is most likely the measure of central tendency that you are most familiar with, but there are others, such as the median and the mode.</description>
      <content>&lt;h1 id=&#34;introduction-to-central-tendency&#34;&gt;INTRODUCTION TO CENTRAL TENDENCY&lt;/h1&gt;
&lt;p&gt;A measure of central tendency is a single value that &lt;strong&gt;attempts to describe a set of data by identifying the central position within that set of data&lt;/strong&gt;. As such, measures of central tendency are sometimes called measures of &lt;strong&gt;central location&lt;/strong&gt;. They are also classed as &lt;strong&gt;summary statistics&lt;/strong&gt;. The &lt;strong&gt;mean&lt;/strong&gt; (often called the average) is most likely the measure of central tendency that you are most familiar with, but there are others, such as the &lt;strong&gt;median&lt;/strong&gt; and the &lt;strong&gt;mode&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;so-why-there-are-so-many-ways-to-measure-central-tendency-&#34;&gt;SO, WHY THERE ARE SO MANY WAYS TO MEASURE CENTRAL TENDENCY? 🤔&lt;/h1&gt;
&lt;p&gt;The mean, median and mode are all &lt;strong&gt;valid&lt;/strong&gt; measures of central tendency, but under different conditions, some measures of central tendency become more &lt;strong&gt;appropriate&lt;/strong&gt; to use than others. In the following sections, we will look at the mean, mode and median, and learn how to calculate them and under what conditions they are most appropriate to be used.&lt;/p&gt;
&lt;h1 id=&#34;arithmetic-mean&#34;&gt;ARITHMETIC MEAN&lt;/h1&gt;
&lt;p&gt;The mean (or average) is the most popular and well known measure of central tendency. It can be used with both &lt;strong&gt;discrete and continuous data&lt;/strong&gt;, although its use is most &lt;strong&gt;often with continuous data&lt;/strong&gt;. The mean is equal to the sum of all the values in the data set divided by the number of values in the data set. So, if we have n values  the sample mean, is:
$$  \overline{x} = \frac{x_{1} + x_{2} + &amp;hellip; + x_{n}}{n}$$&lt;/p&gt;
&lt;p&gt;You may have noticed that the above formula refers to the &lt;strong&gt;sample mean&lt;/strong&gt;. So, why have we called it a sample mean? This is because, in statistics, samples and populations have very different meanings and these differences are very important, even if, in the case of the mean, they are calculated in the same way. To acknowledge that we are calculating the population mean and not the sample mean, we use the Greek lower case letter &amp;ldquo;mu&amp;rdquo;, denoted as:&lt;/p&gt;
&lt;p&gt;$$ \mu = \frac{\sum x}{n}$$&lt;/p&gt;
&lt;h6 id=&#34;when-not-to-use-the-mean&#34;&gt;When not to use the mean:&lt;/h6&gt;
&lt;p&gt;The mean has one main disadvantage: it is particularly susceptible to the influence of outliers. These are values that are unusual compared to the rest of the data set by being especially small or large in numerical value.&lt;/p&gt;
&lt;h1 id=&#34;median&#34;&gt;MEDIAN&lt;/h1&gt;
&lt;p&gt;The median is the middle score for a set of data that has been arranged in &lt;strong&gt;order of magnitude&lt;/strong&gt;. The median is &lt;strong&gt;less affected by outliers and skewed data&lt;/strong&gt;. In order to calculate the median, suppose we have the data below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;65&lt;/th&gt;
&lt;th&gt;55&lt;/th&gt;
&lt;th&gt;89&lt;/th&gt;
&lt;th&gt;56&lt;/th&gt;
&lt;th&gt;35&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;56&lt;/th&gt;
&lt;th&gt;55&lt;/th&gt;
&lt;th&gt;87&lt;/th&gt;
&lt;th&gt;45&lt;/th&gt;
&lt;th&gt;92&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;We first need to rearrange that data into order of magnitude (smallest first):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;35&lt;/th&gt;
&lt;th&gt;45&lt;/th&gt;
&lt;th&gt;55&lt;/th&gt;
&lt;th&gt;55&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;56&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;56&lt;/th&gt;
&lt;th&gt;65&lt;/th&gt;
&lt;th&gt;87&lt;/th&gt;
&lt;th&gt;89&lt;/th&gt;
&lt;th&gt;92&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;Our median mark is the middle mark - in this case, 56. It is the middle mark because there are 5 scores &lt;strong&gt;before&lt;/strong&gt; it and 5 scores &lt;strong&gt;after&lt;/strong&gt; it.&lt;/p&gt;
&lt;h1 id=&#34;mode&#34;&gt;MODE&lt;/h1&gt;
&lt;p&gt;The mode is the most frequent score in our data set. On a histogram it represents the highest bar in a bar chart or histogram. You can, therefore, sometimes consider the mode as being the most popular option. An example of a mode is presented below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lucarep.github.io/img/mode-1.png&#34; alt=&#34;mode&#34;&gt;&lt;/p&gt;
&lt;p&gt;Normally, the mode is used for categorical data where we wish to know which is the most common category.&lt;/p&gt;
&lt;h1 id=&#34;introduction-to-dispersion&#34;&gt;INTRODUCTION TO DISPERSION&lt;/h1&gt;
&lt;p&gt;Dispersion in statistics is a way of describing how spread out a set of data is. When a data set has a large value, the values in the set are widely scattered; when it is small the items in the set are tightly clustered. Very basically, this set of data has a small value:&lt;/p&gt;
&lt;p&gt;$$1,2,2,3,3,4$$&lt;/p&gt;
&lt;p&gt;and this set has a wider one:&lt;/p&gt;
&lt;p&gt;$$0,1,20,30,40,100$$&lt;/p&gt;
&lt;p&gt;The spread of a data set can be described by a range of descriptive statistics including &lt;strong&gt;variance, standard deviation, and interquartile range&lt;/strong&gt;. Spread can also be shown in graphs: &lt;strong&gt;dot plots, boxplots, and stem and leaf plots&lt;/strong&gt; have a greater distance with samples that have a larger dispersion and vice versa.&lt;/p&gt;
&lt;h1 id=&#34;standard-deviation&#34;&gt;STANDARD DEVIATION&lt;/h1&gt;
&lt;p&gt;probably the most common measure. It tells you how spread out numbers are from the mean:
$$ \sigma = \sqrt{\frac{\sum|x - \overline{x}|^{2}}{n}}$$&lt;/p&gt;
&lt;h1 id=&#34;variance&#34;&gt;VARIANCE&lt;/h1&gt;
&lt;p&gt;The variance has a similar meaning to the standard deviation, however in some cases it is easier to calculate because it does not use the square root:&lt;/p&gt;
&lt;p&gt;$$ \sigma^{2} = \sqrt{\frac{\sum|x - \overline{x}|}{n}}$$&lt;/p&gt;
&lt;h1 id=&#34;introduction-to-distance&#34;&gt;INTRODUCTION TO DISTANCE&lt;/h1&gt;
&lt;p&gt;Citing Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In statistics, probability theory, and information theory, a statistical distance quantifies the distance between two statistical objects, which can be two random variables, or two probability distributions or samples, or the distance can be between an individual sample point and a population or a wider sample of points.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;the concept of distance is very important in &lt;strong&gt;machine learning&lt;/strong&gt;, however, contrary to what you might think from the definition there is no single concept of distance, but there are several types that we will see below.&lt;/p&gt;
&lt;h1 id=&#34;minkowski-distance&#34;&gt;MINKOWSKI DISTANCE&lt;/h1&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“A Normed vector space is a vector space on which a norm is defined.” 
Suppose A is a vector space then a norm on A is a real-valued function ||A||which satisfies below conditions:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Zero Vector: Zero vector will have zero length.&lt;/li&gt;
&lt;li&gt;Scalar Factor: The direction of the vector doesn’t change when you multiply it with a positive number though its length will be changed.&lt;/li&gt;
&lt;li&gt;Triangle Inequality: If the distance is a norm then the calculated distance between two points will always be a straight line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The distance can be calculated using the below formula:&lt;/p&gt;
&lt;p&gt;$$ (\sum_{i = 1}^{n} |x_{i} - y_{i}|^p)^\frac{1}{p}$$&lt;/p&gt;
&lt;p&gt;Minkowski distance is a generalized distance metric. We can manipulate the above formula by substituting ‘p’ to calculate the distance between two data points in different ways. Thus, Minkowski Distance is also known as &lt;strong&gt;Lp norm distance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Some common values of ‘p’ are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p = 1, Manhattan Distance&lt;/li&gt;
&lt;li&gt;p = 2, Euclidean Distance&lt;/li&gt;
&lt;li&gt;p = infinity, Chebychev Distance&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;manhattan-distance&#34;&gt;MANHATTAN DISTANCE:&lt;/h1&gt;
&lt;p&gt;We use Manhattan distance, also known as &lt;strong&gt;city block distance&lt;/strong&gt;, or &lt;strong&gt;taxicab geometry&lt;/strong&gt; if we need to calculate the distance between two data points in a grid-like path. Manhattan distance metric can be understood with the help of a simple example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lucarep.github.io/img/manhattan.png&#34; alt=&#34;Manhattan&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above picture, imagine each cell to be a building, and the grid lines to be roads. Now if I want to travel from Point A to Point B marked in the image and follow the red or the yellow path. We see that the path is not straight and there are turns. In this case, we use the Manhattan distance metric to calculate the distance walked.
We can get the equation for Manhattan distance by substituting p = 1 in the Minkowski distance formula. The formula is:&lt;/p&gt;
&lt;p&gt;$$ d = \sum_{i = 1}^{n} |x_{i} - y_{i}|$$&lt;/p&gt;
&lt;h6 id=&#34;when-is-manhattan-distance-metric-preferred-in-ml&#34;&gt;When is Manhattan distance metric preferred in ML?&lt;/h6&gt;
&lt;p&gt;Manhattan Distance is preferred over the Euclidean distance metric as the dimension of the data increases. This occurs due to something known as the ‘curse of dimensionality’.&lt;/p&gt;
&lt;h1 id=&#34;euclidean-distance&#34;&gt;EUCLIDEAN DISTANCE:&lt;/h1&gt;
&lt;p&gt;Euclidean distance is the straight line distance between 2 data points in a plane.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lucarep.github.io/img/euclidean.png&#34; alt=&#34;Euclidean&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is calculated using the Minkowski Distance formula by setting ‘p’ value to 2, thus, also known as the L2 norm distance metric. The formula is:&lt;/p&gt;
&lt;p&gt;$$d = \sqrt{\sum_{i = 1}^{n} |x_{i} - y_{i}|^2}$$&lt;/p&gt;
&lt;p&gt;This formula is similar to the Pythagorean theorem formula, Thus it is also known as the &lt;strong&gt;Pythagorean Theorem&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;hamming-distance&#34;&gt;HAMMING DISTANCE&lt;/h1&gt;
&lt;p&gt;Hamming distance is a metric for comparing two binary data strings. While comparing two binary strings of equal length, Hamming distance is the number of bit positions in which the two bits are different.
The Hamming distance between two strings, a and b is denoted as d(a,b).
In order to calculate the Hamming distance between two strings, and, we perform their XOR operation, (a ⊕ b), and then count the total number of 1s in the resultant string.
Suppose there are two strings 11011001 and 10011101.
11011001 ⊕ 10011101 = 01000100. Since, this contains two 1s, the Hamming distance, d(11011001, 10011101) = 2.&lt;/p&gt;
&lt;h1 id=&#34;cosine-distance&#34;&gt;COSINE DISTANCE&lt;/h1&gt;
&lt;p&gt;Cosine distance &amp;amp; Cosine Similarity metric is mainly used to find similarities between two data points. As the cosine distance between the data points increases, the cosine similarity, or the amount of similarity decreases, and vice versa. Thus, Points closer to each other are more similar than points that are far away from each other. Cosine similarity is given by Cos θ, and cosine distance is 1- Cos θ.&lt;/p&gt;
&lt;h6 id=&#34;where-is-it-used&#34;&gt;Where is it used?&lt;/h6&gt;
&lt;p&gt;Cosine metric is mainly used in Collaborative Filtering based recommendation systems to offer future recommendations to users.
Taking the example of a movie recommendation system, Suppose one user (User #1) has watched movies like The Fault in our Stars, and The Notebook, which are of romantic genres, and another user (User #2) has watched movies like The Proposal, and Notting Hill, which are also of romantic genres. So the recommendation system will use this data to recommend User #1 to see The Proposal, and Notting Hill as User #1 and User #2 both prefer the romantic genre and its likely that User #1 will like to watch another romantic genre movie and not a horror one.
Similarly, Suppose User #1 loves to watch movies based on horror, and User #2 loves the romance genre. In this case, User #2 won’t be suggested to watch a horror movie as there is no similarity between the romantic genre and the horror genre.&lt;/p&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php&#34;&gt;https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statisticshowto.com/dispersion/&#34;&gt;https://www.statisticshowto.com/dispersion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@kunal_gohrani/different-types-of-distance-metrics-used-in-machine-learning-e9928c5e26c7&#34;&gt;https://medium.com/@kunal_gohrani/different-types-of-distance-metrics-used-in-machine-learning-e9928c5e26c7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>6_A</title>
      <link>https://lucarep.github.io/post/6_a/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/6_a/</guid>
      <description>Intro In this assignement I had to expand the previous program that manipulated CSV files, adding a scatter plot, a histogram and a contingency table. Everything was done dynamically by inserting the graphs in viewport.
Live Demo here, you can see my program in action   Download source code: click here 📥</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;In this assignement I had to expand the previous program that manipulated CSV files, adding a scatter plot, a histogram and a contingency table. Everything was done dynamically by inserting the graphs in viewport.&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/zmX__Tc2nXs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1QkOaFlt7AdJAIMKEgD_RmBFW0_o8jqM3/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>4_RA</title>
      <link>https://lucarep.github.io/post/4_ra/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/4_ra/</guid>
      <description>WHAT IS A WINDOW? We can see a window like a region used for displaying a particular object.
WHAT IS A VIEWPORT? Each device has it&amp;rsquo;s own coordinate, so, we can see a viewport as a device coordinate after it got normalized. so what we do is mapping a part of the screen to display an object. In other words, world coordinate gets translated into device coordinate to fit in it&amp;rsquo;s relative perspective.</description>
      <content>&lt;h1 id=&#34;what-is-a-window&#34;&gt;WHAT IS A WINDOW?&lt;/h1&gt;
&lt;p&gt;We can see a window like a region used for displaying a particular object.&lt;/p&gt;
&lt;h1 id=&#34;what-is-a-viewport&#34;&gt;WHAT IS A VIEWPORT?&lt;/h1&gt;
&lt;p&gt;Each device has it&amp;rsquo;s own coordinate, so, we can see a viewport as a device coordinate after it got &lt;strong&gt;normalized&lt;/strong&gt;.
so what we do is mapping a part of the screen to display an object. In other words, world coordinate gets translated into device coordinate to fit in it&amp;rsquo;s relative perspective.&lt;/p&gt;
&lt;h1 id=&#34;what-is-window-to-viewport-transformation&#34;&gt;WHAT IS WINDOW TO VIEWPORT TRANSFORMATION?&lt;/h1&gt;
&lt;p&gt;in essence the process described a moment ago, that is, transforming coordinates of the world into those of the device. In most cases the size of an object mapped in the viewport is &lt;strong&gt;smaller&lt;/strong&gt; than the window, but there are cases where we have &lt;strong&gt;larger&lt;/strong&gt; dimensions than the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lucarep.github.io/img/viewport.png&#34; alt=&#34;Viewport&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;c-program-from-window-to-to-viewport-transformation&#34;&gt;C PROGRAM FROM WINDOW TO TO VIEWPORT TRANSFORMATION&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;graphics.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; W_xmax, W_ymax, W_xmin, W_ymin;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; V_xmax, V_ymax, V_xmin, V_ymin;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; sx, sy;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, x1, x2, y, y1, y2;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; gr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DETECT, gm;
  initgraph (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;gr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;gm, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TURBOC3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;BGI&amp;#34;&lt;/span&gt;);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;****** Window to Viewport ***********&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the coordinates for triangle &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; x and y = &amp;#34;&lt;/span&gt;);
  scanf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;y);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; x1 and y1 = &amp;#34;&lt;/span&gt;);
  scanf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x1, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;y1);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; x2 and y2 = &amp;#34;&lt;/span&gt;);
  scanf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x2, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;y2);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter Window coordinates &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; First enter XMax, YMax =&amp;#34;&lt;/span&gt;);
  scanf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;W_xmax, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;W_ymax);
  printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Now, enter XMin, YMin =&amp;#34;&lt;/span&gt;);
  scanf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;W_xmin, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;W_ymin);
  cleardevice ();
  delay (&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;);      
  &lt;span style=&#34;color:#75715e&#34;&gt;//Window 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  rectangle (W_xmin, W_ymin, W_xmax, W_ymax);
  outtextxy (W_xmin, W_ymin &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Window&amp;#34;&lt;/span&gt;);  
  &lt;span style=&#34;color:#75715e&#34;&gt;//drawing a triangle 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  line (x, y, x1, y1);
  line (x1, y1, x2, y2);
  line (x2, y2, x, y);  
  &lt;span style=&#34;color:#75715e&#34;&gt;// viewport 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  V_xmin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;;
  V_ymin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;;
  V_xmax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;550&lt;/span&gt;;
  V_ymax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;350&lt;/span&gt;;
  rectangle (V_xmin, V_ymin, V_xmax, V_ymax);
  outtextxy (V_xmin, V_ymin &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Viewport&amp;#34;&lt;/span&gt;);  
  &lt;span style=&#34;color:#75715e&#34;&gt;// calculatng Sx and Sy 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  sx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) (V_xmax &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; V_xmin) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (W_xmax &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_xmin);
  sy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) (V_ymax &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; V_ymin) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (W_ymax &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_ymin);
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_xmin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_xmin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sx);
  x1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_xmin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((x1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_xmin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sx);
  x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_xmin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((x2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_xmin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sx);
  y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_ymin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_ymin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sy);
  y1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_ymin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((y1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_ymin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sy);
  y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V_ymin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;) ((y2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; W_ymin) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sy);
  &lt;span style=&#34;color:#75715e&#34;&gt;// drawing triangle 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  line (x, y, x1, y1);
  line (x1, y1, x2, y2);
  line (x2, y2, x, y);
  getch ();
  closegraph ();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javatpoint.com/computer-graphics-window-to-viewport-co-ordinate-transformation&#34;&gt;https://www.javatpoint.com/computer-graphics-window-to-viewport-co-ordinate-transformation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://programmerbay.com/program-to-implement-window-to-viewport-transformation/&#34;&gt;https://programmerbay.com/program-to-implement-window-to-viewport-transformation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>3_RA : LEARN THE ART AND PUT IT ASIDE</title>
      <link>https://lucarep.github.io/post/3_ra/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/3_ra/</guid>
      <description>THE BASIC OF GDI+ n graphical user interfaces such as Microsoft Windows, drawing on the screen is an important task.
Everything displayed on the screen is based on simple drawing operations. Often, environments such as Visual Basic abstract those drawing operations away from the developer. However, the same drawing operations still take place under the hood. In Visual Studio .NET, developers have easy access to that drawing functionality whenever they need it through a technology called GDI+.</description>
      <content>&lt;h1 id=&#34;the-basic-of-gdi&#34;&gt;THE BASIC OF GDI+&lt;/h1&gt;
&lt;p&gt;n graphical user interfaces such as Microsoft Windows, drawing on the screen is an important task.&lt;/p&gt;
&lt;p&gt;Everything displayed on the screen is based on simple drawing operations. Often, environments such as Visual Basic abstract those drawing operations away from the developer. However, the same drawing operations still take place under the hood. In Visual Studio .NET, developers have easy access to that drawing functionality whenever they need it through a technology called GDI+. Using GDI+, developers can easily perform drawing operations such as generating graphs or building custom controls.&lt;/p&gt;
&lt;p&gt;Whenever you create a Windows Forms (WinForms) application .NET uses(and includes) GDI+ by default. The System.Drawing namespace contains all GDI+ functionality (as well as a few sub-namespaces). GDI+ provides all the basic drawing features, such as drawing lines, curves, circles, ellipses, strings, bitmaps, and more. GDI+ also gives developers the ability to fill areas with colors, patterns, and textures. This article will explain some of the basic drawing mechanisms that GDI+ provides.&lt;/p&gt;
&lt;h1 id=&#34;the-grafic-object&#34;&gt;THE GRAFIC OBJECT&lt;/h1&gt;
&lt;p&gt;All GDI+ drawing is done using a Graphics object. This object has a large number of methods that encapsulate drawing operations on a drawing “canvas.” GDI+ supports a number of drawing canvases including: windows, bitmaps, and printer pages. Depending on the type of drawing canvas, the Graphics object is created or retrieved in a number of different ways. If you want to modify the contents of a bitmap file you would create a Bitmap canvas using the FromImage() method. This article will focus on one type of canvas: the window.&lt;/p&gt;
&lt;p&gt;Drawing in a WinForms-form is a somewhat peculiar task, because it is not enough to draw the graphic once. Instead, the “drawing” may have to be “refreshed” (re-drawn) whenever a window requires repainting. Repainting can happen whenever a user resizes a window or one window overlaps another window and then something brings the overlapped windows to the front.&lt;/p&gt;
&lt;p&gt;So how do you know when to start drawing? The easiest way is to listen to the Paint event that is fired by every window (or control for that matter). The Paint event is a very good choice for drawing-logic because it fires whenever you need to refresh the display, and because part of the Paint event arguments (parameters) is a handle to the Graphics object. You can access the Graphics object via the following C# code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Paint(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender,
System.Windows.Forms.PaintEventArgs e)
{
Graphics g = e.Graphics;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;simple-line-drawings&#34;&gt;SIMPLE LINE DRAWINGS&lt;/h1&gt;
&lt;p&gt;A fundamental task performed by the graphics-object, is drawing lines and curves. You can use a number of methods for this purpose.&lt;/p&gt;
&lt;p&gt;In GDI+, unlike in regular (older) GDI, drawing lines and filling areas are two entirely different operations.&lt;/p&gt;
&lt;p&gt;When you draw lines, you must consider a number of fundamental things. For example, you need to choose what kind of line to draw.. Do you want a straight line, or a curve? Do you want a simple, single line, or do you want to draw a complex line composed out of many segments? Maybe you want to draw a closed shape that forms a completely enclosed area with an identical start and end point (such as a circle, rectangle, or polygon)? Depending on the desired shape of the line, different methods are available to generate them.&lt;/p&gt;
&lt;p&gt;Less obvious than the position and shape of the line, are the parameters for a line. You might ask, “What parameters can I specify for a line?” You can specify the following parameters: attributes such as color and thickness, start and end-points, and the shape of the end of a line such as whether the line ends in a rounded or square “head” or ends in an arrow.&lt;/p&gt;
&lt;p&gt;In GDI+, lines are represented by Pen objects. Pens encapsulate all the attributes described above. GDI+ provides a number of default Pen objects, such as pens of different colors. The following code demonstrated drawing a simple straight line using different pens.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;g.DrawLine(Pens.Red,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
g.DrawLine(Pens.Green,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
g.DrawLine(Pens.Blue,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to adjust the thickness of the used pen, you need to instantiate a custom pen object. This example generates a 5-pixel thick red pen and uses it to draw another line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;g.DrawLine( &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;   New Pen(Color.Red, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you play with the DrawLine() method a bit, you will discover that it has a large number of overloads, though the result of these overloads is the same. You can just take different paths to your destination. I encourage you to experiment with the different options.&lt;/p&gt;
&lt;p&gt;For instance, you can draw circles and ellipses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;g.DrawEllipse(Pens.Red, &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, you can draw rectangles with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;g.DrawRectangle(Pens.Green, &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codemag.com/article/0305031&#34;&gt;https://www.codemag.com/article/0305031&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>4_R</title>
      <link>https://lucarep.github.io/post/4_r/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/4_r/</guid>
      <description>INTRO in this post we will talk about what are marginal, joint and conditional distributions. later we will discuss how to use Bayes&#39; theorem using relative frequencies. Finally, we will explain the concept of statistical independence and why, in case of independence, the relative joint frequencies are equal to the products of the corresponding marginal frequencies. So, let&amp;rsquo;s get started!
WHAT ARE MARGINAL DISTRIBUTION? The frequency of an category occurring (Freq(X)), it may be thought of as an unconditional frequency.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;INTRO&lt;/h1&gt;
&lt;p&gt;in this post we will talk about what are marginal, joint and conditional distributions. later we will discuss how to use Bayes&#39; theorem using relative frequencies. Finally, we will explain the concept of statistical independence and why, in case of independence, the relative joint frequencies are equal to the products of the corresponding marginal frequencies. So, let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h1 id=&#34;what-are-marginal-distribution&#34;&gt;WHAT ARE MARGINAL DISTRIBUTION?&lt;/h1&gt;
&lt;p&gt;The frequency of an category occurring (Freq(X)), it may be thought of as an &lt;strong&gt;unconditional frequency.&lt;/strong&gt;  It is not conditioned on another category.  Example:  the frequency that a card drawn is red (Freq(red) = 0.5).  Another example could be:  the frequency that a card drawn is a 4  (Freq(four)=1/13).&lt;/p&gt;
&lt;p&gt;$$ Freq(X) = \frac{\text{count of statistical units that fall into category X}}{\text{total count of statistical units}}$$&lt;/p&gt;
&lt;h1 id=&#34;what-are-joint-frequency&#34;&gt;WHAT ARE JOINT FREQUENCY?&lt;/h1&gt;
&lt;p&gt;Example:  the frequency that a card is a four and red =Freq(four and red) = 2/52=1/26.  (There are two red fours in a deck of 52, the 4 of hearts and the 4 of diamonds).&lt;/p&gt;
&lt;p&gt;$$ Freq(X \cap Y) = \frac{\text{counts of statistical units falling into categories X and Y}}{\text{total count of statistical units}}$$&lt;/p&gt;
&lt;h1 id=&#34;what-are-conditional-distribution&#34;&gt;WHAT ARE CONDITIONAL DISTRIBUTION?&lt;/h1&gt;
&lt;p&gt;Freq(X | Y) is the frequency of a statistical units falling into category X, given that it already falls into category Y. Example:  given that you drew a red card, what’s the frequency that it’s a four (Freq(four|red))=2/26=1/13.  So out of the 26 red cards (given a red card), there are two fours so 2/26=1/13.&lt;/p&gt;
&lt;p&gt;$$ Freq(X|Y) = \frac{Freq(X \cap Y)}{Freq(Y)}$$&lt;/p&gt;
&lt;h1 id=&#34;bayes-theorem&#34;&gt;BAYES THEOREM:&lt;/h1&gt;
&lt;p&gt;Bayes’ theorem is an equation that allows us to manipulate conditional frequencies. For two categories, X and Y, Bayes’ theorem lets us to go from Freq(Y|X) to Freq(X|Y) if we know the marginal probabilities of the outcomes of Xand the frequency of Y, given the outcomes of X. Here is the equation for Bayes’ theorem for two categorys with two possible outcome (X and not Y). Note the inter-steps that show how the final result is reached.
It follows just from the conditional distribution equation, where we substitute 
Freq(X ∩Y) with Freq(Y|X)Freq(X).&lt;/p&gt;
&lt;p&gt;$$ Freq(X|Y) = \frac{Freq(X \cap Y)}{Freq(Y)} = \frac{Freq(Y|X)Freq(X)}{Freq(Y)}$$&lt;/p&gt;
&lt;h1 id=&#34;what-is-statistical-independence&#34;&gt;WHAT IS STATISTICAL INDEPENDENCE?&lt;/h1&gt;
&lt;p&gt;$$ Pr(A|B) = Pr(A)$$&lt;/p&gt;
&lt;p&gt;we can say that A, is statistically independent of B when :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;whether B happens makes no difference to how often A happens.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If this holds, though, then B is also independent of A :&lt;/p&gt;
&lt;p&gt;$$ Pr(B|A) = \frac{Pr(A \cap B)}{Pr(A)} = \frac{Pr(A)Pr(B)}{Pr(A)} = Pr(B)$$&lt;/p&gt;
&lt;p&gt;so we can just say “A and B are independent”.&lt;/p&gt;
&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;
&lt;p&gt;Statistically independent is not the same as mutually exclusive: if A and B are mutually exclusive, then they can’t be independent, unless one of them is probability 0 to start with: 
$$ Pr(A \cap B) = 0 = Pr(A)Pr(B)$$&lt;/p&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.nicholas.duke.edu/statsreview/jmc/&#34;&gt;https://sites.nicholas.duke.edu/statsreview/jmc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stat.cmu.edu/~cshalizi/36-220/lecture-5.pdf&#34;&gt;https://www.stat.cmu.edu/~cshalizi/36-220/lecture-5.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>2_RA : 50 SHADES OF DATA</title>
      <link>https://lucarep.github.io/post/2_ra/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/2_ra/</guid>
      <description>WHAT IS DATA VISUALIZATION? The human mind is very receptive to visual information. That’s why data visualization is a powerful tool for communication.
Data visualization is the visual presentation of data or information. The goal of data visualization is to communicate data or information clearly and effectively to readers. Typically, data is visualized in the form of a chart, infographic, diagram or map. Charts use visual symbols like line, bars, dots, slices, and icons to represent data points.</description>
      <content>&lt;h1 id=&#34;what-is-data-visualization&#34;&gt;WHAT IS DATA VISUALIZATION?&lt;/h1&gt;
&lt;p&gt;The human mind is very receptive to visual information. That’s why data visualization is a powerful tool for communication.&lt;/p&gt;
&lt;p&gt;Data visualization is the visual presentation of data or information. The goal of data visualization is to communicate data or information clearly and effectively to readers. Typically, data is visualized in the form of a chart, infographic, diagram or map. Charts use visual symbols like line, bars, dots, slices, and icons to represent data points.&lt;/p&gt;
&lt;h1 id=&#34;is-it-important-to-choose-a-specific-type-of-chart-to-visualize-data&#34;&gt;IS IT IMPORTANT TO CHOOSE A SPECIFIC TYPE OF CHART TO VISUALIZE DATA?&lt;/h1&gt;
&lt;p&gt;Short answer: &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;but-why&#34;&gt;BUT WHY?&lt;/h3&gt;
&lt;p&gt;Well, we can say that some charts are better suited for some purposes than others and help us to better communicate what we want, let&amp;rsquo;s see some examples:&lt;/p&gt;
&lt;h3 id=&#34;inform&#34;&gt;INFORM&lt;/h3&gt;
&lt;p&gt;You want to convey a single important data point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single big number&lt;/li&gt;
&lt;li&gt;Donut chart&lt;/li&gt;
&lt;li&gt;Pictograph&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compare&#34;&gt;COMPARE&lt;/h3&gt;
&lt;p&gt;You want to compare categories or show composition.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bar chart&lt;/li&gt;
&lt;li&gt;Bubble chart&lt;/li&gt;
&lt;li&gt;Pie chart&lt;/li&gt;
&lt;li&gt;Stacked bar chart&lt;/li&gt;
&lt;li&gt;Bubble cloud&lt;/li&gt;
&lt;li&gt;Treemap&lt;/li&gt;
&lt;li&gt;Word Cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;change&#34;&gt;CHANGE&lt;/h3&gt;
&lt;p&gt;You want to show change over time by location.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line chart&lt;/li&gt;
&lt;li&gt;Area chart&lt;/li&gt;
&lt;li&gt;Timeline&lt;/li&gt;
&lt;li&gt;Map chart&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;organize&#34;&gt;ORGANIZE&lt;/h3&gt;
&lt;p&gt;You want to show groupings,rankings, or process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Flow chart&lt;/li&gt;
&lt;li&gt;Venn diagram&lt;/li&gt;
&lt;li&gt;Mind map&lt;/li&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;li&gt;Table&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;relationships&#34;&gt;RELATIONSHIPS&lt;/h3&gt;
&lt;p&gt;You want to reveal relationships correlations or distributions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scatter plot&lt;/li&gt;
&lt;li&gt;Histogram&lt;/li&gt;
&lt;li&gt;Multi-Series chart&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://venngage.com/blog/data-visualization/&#34;&gt;https://venngage.com/blog/data-visualization/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>5_A : &#39;SAY WHAT AGAIN&#39;</title>
      <link>https://lucarep.github.io/post/5_a/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/5_a/</guid>
      <description>Intro in this task, I&amp;rsquo;ve realized a program that reads as input a text file (.txt), shows its content and computes the World Cloud.In the example shown in the video I used one of the most famous dialogues from the movie Pulp Fiction (one of my favorites).
Live Demo here, you can see my program in action   Result C# Code: using System; using System.Collections; using System.Collections.Generic; using System.IO; using Microsoft.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;in this task, I&amp;rsquo;ve realized a program that reads as input a text file (.txt), shows its content and computes the World Cloud.In the example shown in the video I used one of the most famous dialogues from the movie &lt;a href=&#34;https://it.wikipedia.org/wiki/Pulp_Fiction&#34;&gt;Pulp Fiction&lt;/a&gt; (one of my favorites).&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/6Yp2R4KitY4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://lucarep.github.io/img/WordCloud.JPG&#34; alt=&#34;wordcloud&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;c-code&#34;&gt;C# Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.IO;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Microsoft.VisualBasic.CompilerServices; &lt;span style=&#34;color:#75715e&#34;&gt;// Install-Package Microsoft.VisualBasic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; WordCloud;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.Load += Form1_Load;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; text;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; words = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.EnableAutoDragDrop = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RichTextBox1_DragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, Global.System.Windows.Forms.DragEventArgs e)
    {
        e.Effect = DragDropEffects.None;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Clear();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] files = (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[])e.Data.GetData(DataFormats.FileDrop);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; path &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; files)
            ProcessaFile(path);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RichTextBox1_DragEnter(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, Global.System.Windows.Forms.DragEventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Data.GetDataPresent(DataFormats.FileDrop))
        {
            e.Effect = DragDropEffects.Copy;
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ProcessaFile(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.AppendText(path + Environment.NewLine);
        Button2.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ButtonGetFile_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; ofd = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenFileDialog();
        ofd.ShowDialog();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ofd.FileName &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Text = ofd.FileName;
            Button2.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Button2_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.Clear();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Text;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sr = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StreamReader(path);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; line = sr.ReadLine();
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sr.EndOfStream)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(line + Environment.NewLine);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
        text = File.ReadAllText(path).Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).ToLower();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; wordsInFile = text.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; word &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (IEnumerable)wordsInFile)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (words.ContainsKey(Conversions.ToString(word)))
            {
                words[Conversions.ToString(word)] += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                words[Conversions.ToString(word)] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(Environment.NewLine + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FREQUENCY OF WORDS IN TEXT&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Word&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) + Environment.NewLine);
        Button3.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Button3_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; wordss = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; frequency = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; kvp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; words)
        {
            wordss.Add(kvp.Key.ToString());
            frequency.Add(kvp.Value);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) + Environment.NewLine);
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; wc = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WordCloud.WordCloud(&lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
        wc.Draw(wordss, frequency).Save(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;C:\Users\Luca\Desktop\WordCloud.JPG&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; imagePath = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;C:\Users\Luca\Desktop\WordCloud.JPG&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PictureBox1.Image = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(imagePath);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vbnet-code&#34;&gt;VB.NET Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;Imports System.IO
Imports WordCloud

Public Class Form1
    Dim text
    Dim words As Dictionary(Of String, Integer) = New Dictionary(Of String, Integer)()
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.RichTextBox1.EnableAutoDragDrop = True
    End Sub
    Private Sub RichTextBox1_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragDrop
        e.Effect = DragDropEffects.None

        Me.RichTextBox1.Clear()
        Dim files() As String = CType(e.Data.GetData(DataFormats.FileDrop), String())

        For Each path In files
            Me.ProcessaFile(path)
        Next
    End Sub
    Private Sub RichTextBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragEnter
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            e.Effect = DragDropEffects.Copy
        End If
    End Sub
    Sub ProcessaFile(path As String)
        Me.RichTextBox1.AppendText(path &amp;amp; Environment.NewLine)
        Button2.Enabled = True
    End Sub
    Private Sub ButtonGetFile_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim ofd As New OpenFileDialog
        ofd.ShowDialog()

        If ofd.FileName IsNot Nothing Then
            Me.RichTextBox1.Text = ofd.FileName
            Button2.Enabled = True
        End If
    End Sub
    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        Me.RichTextBox2.Clear()
        Dim path As String = Me.RichTextBox1.Text
        Dim sr As New StreamReader(path)

        Do
            Dim line As String = sr.ReadLine
            If sr.EndOfStream Then
                Exit Do
            End If
            Me.RichTextBox2.AppendText(line &amp;amp; Environment.NewLine)
        Loop

        text = File.ReadAllText(path).Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).ToLower()
        Dim wordsInFile = text.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;c)

        For Each word In wordsInFile
            If words.ContainsKey(word) Then
                words(word) += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            Else
                words(word) = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            End If
        Next
        Me.RichTextBox2.AppendText(Environment.NewLine &amp;amp; Environment.NewLine)
        Me.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FREQUENCY OF WORDS IN TEXT&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Me.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Me.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Word&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &amp;amp; Environment.NewLine)
        Button3.Enabled = True
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim wordss As New List(Of String)
        Dim frequency As New List(Of Integer)
        For Each kvp As KeyValuePair(Of String, Integer) In words
            wordss.Add(kvp.Key.ToString())
            frequency.Add(kvp.Value)
            Me.RichTextBox2.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &amp;amp; Environment.NewLine)
        Next
        Dim wc As New WordCloud.WordCloud(&lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, True)
        wc.Draw(wordss, frequency).Save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\Luca\Desktop\WordCloud.JPG&amp;#34;&lt;/span&gt;)
        Dim imagePath As String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\Luca\Desktop\WordCloud.JPG&amp;#34;&lt;/span&gt;
        Me.PictureBox1.Image = New Bitmap(imagePath)
    End Sub
End Class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/15gUGMDWvsEc9yn3AxjUJT8vU44WKyhLJ/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>4_A : RAMEN AND STATISTICS</title>
      <link>https://lucarep.github.io/post/4_a/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/4_a/</guid>
      <description>Intro In this task I have created a program that takes as input a CSV file regarding some Ramen stores around the world. It is possible to visualize all the data in the file and some interesting statistics are computed, both in the case of one variable and in the case of two variables. If you want to try the program, besides downloading the source code at the end of the page, clicking here you will find the link to download the CSV file.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;In this task I have created a program that takes as input a CSV file regarding some Ramen stores around the world. It is possible to visualize all the data in the file and some interesting statistics are computed, both in the case of one variable and in the case of two variables.
If you want to try the program, besides downloading the source code at the end of the page, &lt;a href=&#34;https://www.kaggle.com/residentmario/ramen-ratings&#34;&gt;clicking here&lt;/a&gt; you will find the link to download the CSV file.&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PJTa3aqo9Iw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;c-code&#34;&gt;C# Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Microsoft.VisualBasic.CompilerServices; &lt;span style=&#34;color:#75715e&#34;&gt;// Install-Package Microsoft.VisualBasic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Microsoft.VisualBasic.FileIO; &lt;span style=&#34;color:#75715e&#34;&gt;// Install-Package Microsoft.VisualBasic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.Load += Form1_Load;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;Ramen&amp;gt; listOfValues = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Ramen&amp;gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.EnableAutoDragDrop = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RichTextBox1_DragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, Global.System.Windows.Forms.DragEventArgs e)
    {
        e.Effect = DragDropEffects.None;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Clear();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] files = (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[])e.Data.GetData(DataFormats.FileDrop);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; path &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; files)
            ProcessaFile(path);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RichTextBox1_DragEnter(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, Global.System.Windows.Forms.DragEventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Data.GetDataPresent(DataFormats.FileDrop))
        {
            e.Effect = DragDropEffects.Copy;
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ProcessaFile(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.AppendText(path + Environment.NewLine);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; tfp = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TextFieldParser(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Text.Trim);
        tfp.Delimiters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; };
        tfp.TextFieldType = FieldType.Delimited;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; desc = tfp.ReadLine();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(desc + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__________________________________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (tfp.EndOfData == &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fields = tfp.ReadFields();
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Ramen();
            r.numberOfReview = Conversions.ToInteger(fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
            r.brand = fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
            r.variety = fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
            r.style = fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;)
            {
                r.country = fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Equals(fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unrated&amp;#34;&lt;/span&gt;))
            {
                r.stars = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)Math.Round(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;);
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                r.stars = Conversions.ToInteger(fields[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]);
                &lt;span style=&#34;color:#75715e&#34;&gt;// Me.RichTextBox2.AppendText(fields(5) &amp;amp; Environment.NewLine)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox2.AppendText(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0} - {1} - {2} - {3} - {4} - {5} &amp;#34;&lt;/span&gt;, r.numberOfReview, r.brand, r.variety, r.style, r.country, r.stars) + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;)
            {
                listOfValues.Add(r);
            }
        }

        Button3.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ButtonGetFile_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; ofd = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenFileDialog();
        ofd.ShowDialog();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ofd.FileName &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox1.Text = ofd.FileName;
        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Button3_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ARITHMETIC MEAN OF # OF REVIEWS &amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; totalNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;2580&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; ramen &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfValues)
            sum += ramen.numberOfReview;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; average = Math.Round(sum / (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)(totalNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(average + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DISTRIBUTION OF RAMEN SHOPS IN COUNTRIES&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; frequencyDist = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Frequencies&amp;gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Ramen r &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfValues)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (frequencyDist.ContainsKey(r.country))
            {
                frequencyDist[r.country].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                frequencyDist.Add(r.country, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m));
            }

            frequencyDist[r.country].relativeFreq = Math.Round(frequencyDist[r.country].count / (totalNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
            frequencyDist[r.country].precentage = frequencyDist[r.country].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Frequencies&amp;gt; kvp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; frequencyDist)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.precentage.ToString() + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(Environment.NewLine + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DISTRIBUTION OF RATINGS OF RAMEN SHOPS IN JAPAN&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; ratingsDist = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, Frequencies&amp;gt;();
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m));
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m));
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m));
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m));
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; totalNum = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Ramen r &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfValues)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.country.Equals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Japan&amp;#34;&lt;/span&gt;))
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.stars == &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
                {
                    ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.stars == &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
                {
                    ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.stars == &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
                {
                    ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.stars == &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                {
                    ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (r.stars == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                {
                    ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }
            }
        }

        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].relativeFreq = Math.Round(ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].precentage = ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;].relativeFreq = Math.Round(ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;].count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;].precentage = ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].relativeFreq = Math.Round(ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].precentage = ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].relativeFreq = Math.Round(ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].precentage = ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].relativeFreq = Math.Round(ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].precentage = ratingsDist[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rating &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + Environment.NewLine);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, Frequencies&amp;gt; kvp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; ratingsDist)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RichTextBox3.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.precentage.ToString() + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; + Environment.NewLine);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ramen&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; brand, variety, style, country;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; numberOfReview;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stars;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Frequencies&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; count;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; relativeFreq;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; precentage;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; c)
    {
        count = c;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; c, &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; rf, &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; p)
    {
        count = c;
        relativeFreq = rf;
        precentage = p;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vbnet-code&#34;&gt;VB.NET Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;Imports System.IO
Imports Microsoft.VisualBasic.FileIO

Public Class Form1

    Dim listOfValues As New List(Of Ramen)
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.RichTextBox1.EnableAutoDragDrop = True
    End Sub
    Private Sub RichTextBox1_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragDrop
        e.Effect = DragDropEffects.None

        Me.RichTextBox1.Clear()
        Dim files() As String = CType(e.Data.GetData(DataFormats.FileDrop), String())

        For Each path In files
            Me.ProcessaFile(path)
        Next
    End Sub
    Private Sub RichTextBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragEnter
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            e.Effect = DragDropEffects.Copy
        End If
    End Sub
    Sub ProcessaFile(path As String)
        Me.RichTextBox1.AppendText(path &amp;amp; Environment.NewLine)
    End Sub
    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click

        Dim tfp As New TextFieldParser(Me.RichTextBox1.Text.Trim)
        tfp.Delimiters = New String() {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;}
        tfp.TextFieldType = FieldType.Delimited

        Dim desc As String = tfp.ReadLine()
        Me.RichTextBox2.AppendText(desc &amp;amp; Environment.NewLine)
        Me.RichTextBox2.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__________________________________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine &amp;amp; Environment.NewLine)


        While tfp.EndOfData = False
            Dim fields = tfp.ReadFields()
            Dim r As New Ramen()
            r.numberOfReview = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            r.brand = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            r.variety = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
            r.style = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
            If fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) IsNot Nothing Then
                r.country = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            End If
            If String.Equals(fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unrated&amp;#34;&lt;/span&gt;) Then
                r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
            Else
                r.stars = fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;Me.RichTextBox2.AppendText(fields(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &amp;amp; Environment.NewLine)
            End If
            Me.RichTextBox2.AppendText(String.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0} - {1} - {2} - {3} - {4} - {5} &amp;#34;&lt;/span&gt;, r.numberOfReview, r.brand, r.variety, r.style, r.country, r.stars) &amp;amp; Environment.NewLine)

            If r IsNot Nothing Then
                listOfValues.Add(r)
            End If

        End While
        Button3.Enabled = True
    End Sub
    Private Sub ButtonGetFile_Click(sender As Object, e As EventArgs) Handles Button2.Click
        Dim ofd As New OpenFileDialog
        ofd.ShowDialog()

        If ofd.FileName IsNot Nothing Then
            Me.RichTextBox1.Text = ofd.FileName
        End If
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ARITHMETIC MEAN OF # OF REVIEWS &amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Dim totalNumber As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;2580&lt;/span&gt;
        Dim sum As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        For Each ramen In listOfValues
            sum += ramen.numberOfReview
        Next
        Dim average As Double = Math.Round(sum / (totalNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        Me.RichTextBox3.AppendText(average &amp;amp; Environment.NewLine)
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DISTRIBUTION OF RAMEN SHOPS IN COUNTRIES&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Dim frequencyDist As Dictionary(Of String, Frequencies) = New Dictionary(Of String, Frequencies)()
        For Each r As Ramen In listOfValues

            If frequencyDist.ContainsKey(r.country) Then
                frequencyDist(r.country).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            Else
                frequencyDist.Add(r.country, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
            End If

            frequencyDist(r.country).relativeFreq = Math.Round(frequencyDist(r.country).count / (totalNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
            frequencyDist(r.country).precentage = frequencyDist(r.country).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        Next
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; Environment.NewLine)
        For Each kvp As KeyValuePair(Of String, Frequencies) In frequencyDist
            Me.RichTextBox3.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.precentage.ToString() &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Next
        Me.RichTextBox3.AppendText(Environment.NewLine &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DISTRIBUTION OF RATINGS OF RAMEN SHOPS IN JAPAN&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Dim ratingsDist As Dictionary(Of Integer, Frequencies) = New Dictionary(Of Integer, Frequencies)()
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        ratingsDist.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        Dim totalNum = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        For Each r As Ramen In listOfValues
            If r.country.Equals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Japan&amp;#34;&lt;/span&gt;) Then
                If r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; Then
                    ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                End If
                If r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; Then
                    ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                End If
                If r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Then
                    ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                End If
                If r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Then
                    ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                End If
                If r.stars = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; Then
                    ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    totalNum += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                End If
            End If
        Next
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;).relativeFreq = Math.Round(ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;).count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;).precentage = ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;).relativeFreq = Math.Round(ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;).count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;).precentage = ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).relativeFreq = Math.Round(ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).precentage = ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).relativeFreq = Math.Round(ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).precentage = ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).relativeFreq = Math.Round(ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).count / (totalNum - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).precentage = ratingsDist(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        Me.RichTextBox3.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rating &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; Environment.NewLine)
        For Each kvp As KeyValuePair(Of Integer, Frequencies) In ratingsDist
            Me.RichTextBox3.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.precentage.ToString() &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
        Next

    End Sub
End Class
Public Class Ramen
    Public brand, variety, style, country As String
    Public numberOfReview As Integer
    Public stars As Integer
End Class
Public Class Frequencies
    Public count As Decimal
    Public relativeFreq As Decimal
    Public precentage As Decimal

    Public Sub New(ByVal c As Decimal)
        count = c
    End Sub

    Public Sub New(ByVal c As Decimal, ByVal rf As Decimal, ByVal p As Decimal)
        count = c
        relativeFreq = rf
        precentage = p
    End Sub
End Class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1S3xdDpb5xEbvkZqAC63H2YuIsKDgTidJ/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>1_RA : FLOATING POINT REPRESENTATION</title>
      <link>https://lucarep.github.io/post/1_ra/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/1_ra/</guid>
      <description>Rounding Errors Because floating-point numbers have a limited number of digits, they cannot represent all real numbers accurately: when there are more digits than the format allows, the leftover ones are omitted – the number is rounded. There are three reasons why this can be necessary:
  Too many significant digits – The great advantage of floating point is that leading and trailing zeroes (within the range provided by the exponent) don’t need to be stored.</description>
      <content>&lt;h1 id=&#34;rounding-errors&#34;&gt;Rounding Errors&lt;/h1&gt;
&lt;p&gt;Because floating-point numbers have a limited number of digits, they cannot represent all real numbers accurately: when there are more digits than the format allows, the leftover ones are omitted – the number is rounded. There are three reasons why this can be necessary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Too many significant digits – The great advantage of floating point is that leading and trailing zeroes (within the range provided by the exponent) don’t need to be stored. But if, without those, there are still more digits than the significand can store, rounding becomes necessary. In other words, if your number simply requires more precision than the format can provide, you’ll have to sacrifice some of it, which is no big surprise. For example, with a floating point format that has 3 digits in the significand, 1000 does not require rounding, and neither does 10000 or 1110 – but 1001 will have to be rounded. With the large number of significand digits available in typical floating-point formats, this may seem to be a rarely encountered problem, but if you perform a sequence of calculations, especially multiplication and division, you can very quickly reach this point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Periodical digits – Any (irreducible) fraction where the denominator has a prime factor that does not occur in the base requires an infinite number of digits that repeat periodically after a certain point, and this can already happen for very simple fractions. For example, in decimal 1/4, 3/5 and 8/20 are finite, because 2 and 5 are the prime factors of 10. But 1/3 is not finite, nor is 2/3 or 1/7 or 5/6, because 3 and 7 are not factors of 10. Fractions with a prime factor of 5 in the denominator can be finite in base 10, but not in base 2 – the biggest source of confusion for most novice users of floating-point numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-rational numbers – Non-rational numbers cannot be represented as a regular fraction at all, and in positional notation (no matter what base) they require an infinite number of non-recurring digits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rounding-modes&#34;&gt;Rounding Modes&lt;/h1&gt;
&lt;p&gt;There are different methods to do rounding, and this can be very important in programming, because rounding can cause different problems in various contexts that can be addressed by using a better rounding mode. The most common rounding modes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rounding towards zero – simply truncate the extra digits. The simplest method, but it introduces larger errors than necessary as well as a bias towards zero when dealing with mainly positive or mainly negative numbers.&lt;/li&gt;
&lt;li&gt;Rounding half away from zero – if the truncated fraction is greater than or equal to half the base, increase the last remaining digit. This is the method generally taught in school and used by most people. It minimizes errors, but also introduces a bias (away from zero).&lt;/li&gt;
&lt;li&gt;Rounding half to even also known as banker’s rounding – if the truncated fraction is greater than half the base, increase the last remaining digit. If it is equal to half the base, increase the digit only if that produces an even result. This minimizes errors and bias, and is therefore preferred for bookkeeping.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Towards zero&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Half Away from zero&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Half to even&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1.6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-2.4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://floating-point-gui.de/basic/&#34;&gt;https://floating-point-gui.de/basic/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://floating-point-gui.de/errors/rounding/&#34;&gt;https://floating-point-gui.de/errors/rounding/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>3_A</title>
      <link>https://lucarep.github.io/post/3_a/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/3_a/</guid>
      <description>Intro in this assignment, I had to create an object providing a rectangular area which can be moved and resized using the mouse.
Live Demo here, you can see my program in action   VB.NET Code: Public Class Form1 Private x, y As Integer Private Rect As New Rectangle(50, 50, 50, 50) Dim isLeftClickDown As Boolean = False Dim isRightClickDown As Boolean = False Private Sub PictureBox1_MouseDown(ByVal sender As Object, ByVal e As System.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;in this assignment, I had to create an object providing a rectangular area which can be moved and resized using the mouse.&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/nUSGW7_FvgM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;vbnet-code&#34;&gt;VB.NET Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;Public Class Form1
    Private x, y As Integer
    Private Rect As New Rectangle(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
    Dim isLeftClickDown As Boolean = False
    Dim isRightClickDown As Boolean = False

    Private Sub PictureBox1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PictureBox1.MouseDown
        If e.Button = Windows.Forms.MouseButtons.Left AndAlso Rect.Contains(e.Location) Then
            isLeftClickDown = True
            x = Rect.X - e.X
            y = Rect.Y - e.Y
        End If
        If e.Button = Windows.Forms.MouseButtons.Right AndAlso Rect.Contains(e.Location) Then
            isRightClickDown = True
            x = Rect.X - e.X
            y = Rect.Y - e.Y
        End If

    End Sub
    Private Sub PictureBox1_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PictureBox1.MouseUp
        isLeftClickDown = False
        isRightClickDown = False
    End Sub
    Private Sub PictureBox1_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PictureBox1.MouseMove
        If e.Button = Windows.Forms.MouseButtons.Left AndAlso Rect.Contains(e.Location) Then
            Rect.X = e.X + x
            Rect.Y = e.Y + y
            PictureBox1.Refresh()
        End If
        If isRightClickDown Then
            Rect.Size = New Size(Rect.X + e.X, Rect.Y + e.Y)
            PictureBox1.Refresh()
        End If

    End Sub

    Private Sub PictureBox1_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PictureBox1.Paint
        e.Graphics.DrawRectangle(Pens.Red, Rect)
    End Sub
End Class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1ANxn3yiQtIuQTqGfZHpJ17uSUDzOX1s8/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>2_A</title>
      <link>https://lucarep.github.io/post/2_a/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/2_a/</guid>
      <description>Intro in this assignment, I had to code a demonstrative program which computes the online arithmetic mean (if it&amp;rsquo;s a numeric variable) and an algo to compute the distribution for a discrete variable and for a continuous variable (can use values simulated with RANDOM object).
Live Demo here, you can see my program in action   C# Code: using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;in this assignment, I had to code a demonstrative program which computes the online arithmetic mean (if it&amp;rsquo;s a numeric variable) and an algo to compute the distribution for a discrete variable and for a continuous variable (can use values simulated with RANDOM object).&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PM5RLOPsxqk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;c-code&#34;&gt;C# Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.ComponentModel;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Data;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Drawing;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Windows.Forms;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; _2_A
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Random R = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random();

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.Clear();

            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; studentNumber = &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minHeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxHeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;;

            List&amp;lt;Student&amp;gt; listOfStudents = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Student&amp;gt;(studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATASET - Cryptography exam : Grades of students&amp;#34;&lt;/span&gt; + Environment.NewLine + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Count: &amp;#34;&lt;/span&gt; + (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).ToString() + Environment.NewLine + Environment.NewLine);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; studentNumber; i++)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; randomNumber = R.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);

                &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; randomHeight = Math.Round((&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;)R.Next(minHeight, maxHeight), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);

                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Student &amp;#34;&lt;/span&gt; + i.ToString() + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;).PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) + randomNumber.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) + randomHeight.ToString() + Environment.NewLine);

                Student s = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Student(randomNumber,randomHeight);

                listOfStudents.Add(s);
            }

            &lt;span style=&#34;color:#75715e&#34;&gt;// OFFLINE ALGO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; sum = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Student s &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfStudents)
            {
                sum += s.gradeForCryptography;
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; average = Math.Round(sum / (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);

            &lt;span style=&#34;color:#75715e&#34;&gt;// ONLINE ALGO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; currentAvg = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Student s &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfStudents)
            {
                index += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                currentAvg = currentAvg + (s.gradeForCryptography - currentAvg) / index;
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arithmetic mean for Grades(naive formula): &amp;#34;&lt;/span&gt; + average.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;) + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arithmetic mean for Grades(online formula): &amp;#34;&lt;/span&gt; + currentAvg.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;) + Environment.NewLine);

            Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, Frequencies&amp;gt; frequencyDist = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,Frequencies&amp;gt;();

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Student s &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfStudents)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (frequencyDist.ContainsKey(s.gradeForCryptography))
                {
                    frequencyDist[s.gradeForCryptography].count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                {
                    frequencyDist.Add(s.gradeForCryptography, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
                }

                frequencyDist[s.gradeForCryptography].relativeFreq = Math.Round(frequencyDist[s.gradeForCryptography].count / (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
                frequencyDist[s.gradeForCryptography].precentage = frequencyDist[s.gradeForCryptography].relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grade &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt; .PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + Environment.NewLine);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,Frequencies&amp;gt; kvp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; frequencyDist)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + kvp.Value.precentage.ToString() + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; + Environment.NewLine);
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; intervalSize = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; startingEndPoint = &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;//first interval
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            Interval myInterval = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Interval();
            myInterval.lowerEnd = startingEndPoint;
            myInterval.upperEnd = startingEndPoint + intervalSize;

            List&amp;lt;Interval&amp;gt; listOfIntervals = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Interval&amp;gt;();

            listOfIntervals.Add(myInterval);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(Student s &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfStudents)
            {
                Boolean studentInserted = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(Interval i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfIntervals)
                {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.height &amp;gt; i.lowerEnd &amp;amp;&amp;amp; s.height &amp;lt;= i.upperEnd)
                    {
                        i.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                        studentInserted = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
                    }
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(studentInserted == &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
                {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(s.height &amp;lt;= listOfIntervals[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].lowerEnd)
                {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
                    {
                        Interval newLeftInterval = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Interval();
                        newLeftInterval.upperEnd = listOfIntervals[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].lowerEnd;
                        newLeftInterval.lowerEnd = newLeftInterval.upperEnd - intervalSize;

                        listOfIntervals.Insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, newLeftInterval);

                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.height &amp;gt; newLeftInterval.lowerEnd &amp;amp;&amp;amp; s.height &amp;lt;= newLeftInterval.upperEnd)
                        {
                            newLeftInterval.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                            studentInserted = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                        }

                    }
                }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(s.height &amp;gt; listOfIntervals[listOfIntervals.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].upperEnd)
                {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
                    {
                        Interval newRightInterval = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Interval();
                        newRightInterval.lowerEnd = listOfIntervals[listOfIntervals.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].upperEnd;
                        newRightInterval.upperEnd = newRightInterval.lowerEnd + intervalSize;

                        listOfIntervals.Add(newRightInterval);

                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.height &amp;gt; newRightInterval.lowerEnd &amp;amp;&amp;amp; s.height &amp;lt;= newRightInterval.upperEnd)
                        {

                            newRightInterval.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                            studentInserted = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                        }

                    }

                }
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HEIGHT DISTRIBUTION&amp;#34;&lt;/span&gt; + Environment.NewLine);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interval&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt; + Environment.NewLine);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(Interval i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; listOfIntervals)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ &amp;#34;&lt;/span&gt; + i.lowerEnd + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; + i.upperEnd + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;] &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) + i.count + Environment.NewLine);
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Frequencies&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; count;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; relativeFreq;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; precentage;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; c)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.count = c;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Frequencies(&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; c, &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; rf, &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; p)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.count = c;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.relativeFreq = rf;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.precentage = p;
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Interval&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; lowerEnd, upperEnd, count, relativeFrequency, percentage;

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vbnet-code&#34;&gt;VB.NET Code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;Imports System
Imports System.Collections.Generic
Imports System.Windows.Forms

Namespace &lt;span style=&#34;color:#ae81ff&#34;&gt;_2_&lt;/span&gt;A
    Public Partial Class Form1
        Inherits Form

        Public R As Random = New Random()

        Public Sub New()
            InitializeComponent()
        End Sub

        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            Me.richTextBox1.Clear()
            Dim studentNumber As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;
            Dim minHeight As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;
            Dim maxHeight As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
            Dim listOfStudents As List(Of Student) = New List(Of Student)(studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATASET - Cryptography exam : Grades of students&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Count: &amp;#34;&lt;/span&gt; &amp;amp; (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).ToString() &amp;amp; Environment.NewLine &amp;amp; Environment.NewLine)

            For i As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; To studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                Dim randomNumber As Integer = R.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;)
                Dim randomHeight As Decimal = Math.Round(R.Next(minHeight, maxHeight), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                Me.richTextBox1.AppendText((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Student &amp;#34;&lt;/span&gt; &amp;amp; i.ToString() &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;).PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &amp;amp; randomNumber.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &amp;amp; randomHeight.ToString() &amp;amp; Environment.NewLine)
                Dim s As Student = New Student(randomNumber, randomHeight)
                listOfStudents.Add(s)
            Next


            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; OFFLINE ALGO

            Dim sum As Decimal = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

            For Each s As Student In listOfStudents
                sum += s.gradeForCryptography
            Next

            Dim average As Decimal = Math.Round(sum / (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; ONLINE ALGO

            Dim currentAvg As Double = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            Dim index As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

            For Each s As Student In listOfStudents
                index += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                currentAvg = currentAvg + (s.gradeForCryptography - currentAvg) / index
            Next

            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arithmetic mean for Grades(naive formula): &amp;#34;&lt;/span&gt; &amp;amp; average.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;) &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arithmetic mean for Grades(online formula): &amp;#34;&lt;/span&gt; &amp;amp; currentAvg.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;) &amp;amp; Environment.NewLine)
            Dim frequencyDist As Dictionary(Of Integer, Frequencies) = New Dictionary(Of Integer, Frequencies)()

            For Each s As Student In listOfStudents

                If frequencyDist.ContainsKey(s.gradeForCryptography) Then
                    frequencyDist(s.gradeForCryptography).count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                Else
                    frequencyDist.Add(s.gradeForCryptography, New Frequencies(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
                End If

                frequencyDist(s.gradeForCryptography).relativeFreq = Math.Round(frequencyDist(s.gradeForCryptography).count / (studentNumber - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                frequencyDist(s.gradeForCryptography).precentage = frequencyDist(s.gradeForCryptography).relativeFreq * &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
            Next

            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grade &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frequency &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RFreq &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; Environment.NewLine)

            For Each kvp As KeyValuePair(Of Integer, Frequencies) In frequencyDist
                Me.richTextBox1.AppendText(kvp.Key.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.count.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.relativeFreq.ToString().PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; kvp.Value.precentage.ToString() &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
            Next

            Dim intervalSize As Decimal = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
            Dim startingEndPoint As Decimal = &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;

            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;first interval

            Dim myInterval As Interval = New Interval()
            myInterval.lowerEnd = startingEndPoint
            myInterval.upperEnd = startingEndPoint + intervalSize
            Dim listOfIntervals As List(Of Interval) = New List(Of Interval)()
            listOfIntervals.Add(myInterval)

            For Each s As Student In listOfStudents
                Dim studentInserted As Boolean = False

                For Each i As Interval In listOfIntervals

                    If s.height &amp;gt; i.lowerEnd AndAlso s.height &amp;lt;= i.upperEnd Then
                        i.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        studentInserted = True
                    End If
                Next

                If studentInserted = True Then
                    Continue For
                End If

                If s.height &amp;lt;= listOfIntervals(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).lowerEnd Then

                    While True
                        Dim newLeftInterval As Interval = New Interval()
                        newLeftInterval.upperEnd = listOfIntervals(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).lowerEnd
                        newLeftInterval.lowerEnd = newLeftInterval.upperEnd - intervalSize
                        listOfIntervals.Insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, newLeftInterval)

                        If s.height &amp;gt; newLeftInterval.lowerEnd AndAlso s.height &amp;lt;= newLeftInterval.upperEnd Then
                            newLeftInterval.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                            studentInserted = True
                            Exit While
                        End If
                    End While
                ElseIf s.height &amp;gt; listOfIntervals(listOfIntervals.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).upperEnd Then

                    While True
                        Dim newRightInterval As Interval = New Interval()
                        newRightInterval.lowerEnd = listOfIntervals(listOfIntervals.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).upperEnd
                        newRightInterval.upperEnd = newRightInterval.lowerEnd + intervalSize
                        listOfIntervals.Add(newRightInterval)

                        If s.height &amp;gt; newRightInterval.lowerEnd AndAlso s.height &amp;lt;= newRightInterval.upperEnd Then
                            newRightInterval.count += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                            studentInserted = True
                            Exit While
                        End If
                    End While
                End If
            Next

            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;___________________________________&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HEIGHT DISTRIBUTION&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)
            Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interval&amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt; &amp;amp; Environment.NewLine)

            For Each i As Interval In listOfIntervals
                Me.richTextBox1.AppendText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ &amp;#34;&lt;/span&gt; &amp;amp; i.lowerEnd &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;amp; i.upperEnd &amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;] &amp;#34;&lt;/span&gt;.PadRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &amp;amp; i.count &amp;amp; Environment.NewLine)
            Next
        End Sub

        Public Class Frequencies
            Public count As Decimal
            Public relativeFreq As Decimal
            Public precentage As Decimal

            Public Sub New(ByVal c As Decimal)
                count = c
            End Sub

            Public Sub New(ByVal c As Decimal, ByVal rf As Decimal, ByVal p As Decimal)
                count = c
                relativeFreq = rf
                precentage = p
            End Sub
        End Class

        Public Class Interval
            Public lowerEnd, upperEnd, count, relativeFrequency, percentage As Decimal
        End Class
    End Class
End Namespace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1yVNjPjYmsZQSsRjHFnpg4PPwOggToPB7/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>3_R : ONLINE ALGORITHM</title>
      <link>https://lucarep.github.io/post/3_r/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/3_r/</guid>
      <description>WHAT IS AN ONLINE ALGORITHM? Citing Wikipedia:
 In computer science, an online algorithm is one that can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start. In contrast, an offline algorithm is given the whole problem data from the beginning and is required to output an answer which solves the problem at hand.</description>
      <content>&lt;h1 id=&#34;what-is-an-online-algorithm&#34;&gt;WHAT IS AN ONLINE ALGORITHM?&lt;/h1&gt;
&lt;p&gt;Citing &lt;a href=&#34;https://en.wikipedia.org/wiki/Online_algorithm&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, an online algorithm is one that can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start. In contrast, an offline algorithm is given the whole problem data from the beginning and is required to output an answer which solves the problem at hand. (For example, selection sort requires that the entire list be given before it can sort it, while insertion sort doesn&amp;rsquo;t.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can then summarize this definition by saying:
an online algorithm takes as input a &lt;strong&gt;stream&lt;/strong&gt; of continuous data, while an offline algorithm attempts to solve the problem by already having all the data available from the first moment.&lt;/p&gt;
&lt;h1 id=&#34;how-we-can-obtain-an-online-algo-for-the-arithmetic-mean&#34;&gt;HOW WE CAN OBTAIN AN ONLINE ALGO FOR THE ARITHMETIC MEAN:&lt;/h1&gt;
&lt;p&gt;The problem of calculating the average is trivial, most of us since elementary school can solve it, however solving it with an online algorithm is a more complex task.
Here, comes in help &lt;strong&gt;DONALD KNUTH&lt;/strong&gt; ,an American computer scientist, mathematician, and professor emeritus at Stanford University, in his book ‘&lt;strong&gt;The Art of Computer Programming&lt;/strong&gt;’ wrote an alternative formula to compute the online mean for &lt;strong&gt;huge data-stream.&lt;/strong&gt; The following is the mathematical formula he found to solve the problem:&lt;/p&gt;
&lt;p&gt;$$x_{n} = \frac{x_{n -1}(n -1) + x_{n}}{n}$$&lt;/p&gt;
&lt;h3 id=&#34;kahan-summation-algorithm&#34;&gt;KAHAN SUMMATION ALGORITHM:&lt;/h3&gt;
&lt;p&gt;A code version of the algorithm, is the following one introduced by &lt;strong&gt;KAHAN&lt;/strong&gt;, which is designed to minimize errors, this is done by keeping a separate running compensation (a variable that accumulates small errors).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KahanSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;// A running compensation for lost low-order bits.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// So far, so good: c is zero.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Alas, sum is big, y small, so low-order digits of y are lost.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// (t - sum) cancels the high-order part of y; subtracting y recovers negative (low part of y)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;// Algebraically, c should always be zero. Beware overly-aggressive optimizing compilers!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;// Next time around, the lost low part will be added to y in a fresh attempt.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;why-is-an-online-algo-better-in-this-case&#34;&gt;WHY IS AN ONLINE ALGO BETTER IN THIS CASE?&lt;/h1&gt;
&lt;p&gt;the answer to the question starts with one word &lt;strong&gt;digitalization&lt;/strong&gt;.
We live in an increasingly connected world, where more and more applications are entrusted to &lt;strong&gt;computers&lt;/strong&gt;, so it is unthinkable to be able to store a large amount of data in RAM or hard drive and then use them later, because they take up a lot of &lt;strong&gt;space and resources&lt;/strong&gt;. That&amp;rsquo;s why we need something more efficient, so over the years the &lt;strong&gt;online&lt;/strong&gt; approach has gained more and more attention, because it allows us to save precious resources. Of course, &lt;strong&gt;it&amp;rsquo;s not all gold that glitters&lt;/strong&gt;, in fact, for problems that don&amp;rsquo;t require large amounts of data, an offline approach is preferable because it&amp;rsquo;s easier to implement and in some cases may even be more efficient.&lt;/p&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Federica Sole, &lt;a href=&#34;https://statisticsforcs.wordpress.com/2017/10/24/best-algorithms-to-compute-the-online-data-stream-arithmetic-mean/&#34;&gt;Best algorithms to compute the “online data stream” arithmetic mean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>2_R : LET&#39;S TALK ABOUT DATA</title>
      <link>https://lucarep.github.io/post/2_r/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/2_r/</guid>
      <description>What is a Database? Our discussion of data starts here, the database, but what is actually a database? Citing Oracle:
 A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system (DBMS). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.</description>
      <content>&lt;h1 id=&#34;what-is-a-database&#34;&gt;What is a Database?&lt;/h1&gt;
&lt;p&gt;Our discussion of data starts here, the database, but what is actually a database?
Citing &lt;a href=&#34;https://www.oracle.com/database/what-is-database/&#34;&gt;Oracle&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A database is an &lt;strong&gt;organized collection of structured information&lt;/strong&gt;, or data, typically stored electronically in a &lt;strong&gt;computer system&lt;/strong&gt;. A database is usually controlled by a database management system (&lt;strong&gt;DBMS&lt;/strong&gt;). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.Data within the most common types of databases in operation today is typically modeled in &lt;strong&gt;rows and columns&lt;/strong&gt; in a series of &lt;strong&gt;tables&lt;/strong&gt; to make processing and data querying efficient. The data can then be easily accessed, managed, modified, updated, controlled, and organized. Most databases use structured query language (&lt;strong&gt;SQL&lt;/strong&gt;) for writing and querying data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;so, now that we know what it takes to allow us to record data, we can better address how it is handled in the real world for different purposes.&lt;/p&gt;
&lt;h1 id=&#34;the-data-warehouse-&#34;&gt;The Data Warehouse :&lt;/h1&gt;
&lt;p&gt;First of all, a &lt;strong&gt;data warehouse&lt;/strong&gt; is a particular type of &lt;strong&gt;database&lt;/strong&gt;, but there is a major difference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a database is built to &lt;strong&gt;record&lt;/strong&gt; the data provided to it.&lt;/li&gt;
&lt;li&gt;a Data Warehouse is designed to perform data &lt;strong&gt;aggregations&lt;/strong&gt; for analytical purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, databases are a mathematical basis for collecting data and querying them for operational purposes. The data warehouse, on the other hand, is an analytical system of data that has strategic purposes in the &lt;strong&gt;planning of business processes&lt;/strong&gt;. In addition, data warehouses are very important in data mining, artificial intelligence (AI), and machine learning.&lt;/p&gt;
&lt;h1 id=&#34;what-is-a-data-mart&#34;&gt;What is a Data Mart?&lt;/h1&gt;
&lt;p&gt;We can see the &lt;strong&gt;data mart&lt;/strong&gt; as a focused version of a &lt;strong&gt;data warehouse&lt;/strong&gt; described above. Specifically, citing &lt;a href=&#34;https://www.ibm.com/cloud/learn/data-mart&#34;&gt;IBM&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A data mart is a subset of a data warehouse focused on a particular line of business, department, or subject area. Data marts make specific data available to a defined group of users, which allows those users to &lt;strong&gt;quickly&lt;/strong&gt; access critical insights without wasting time searching through an entire data warehouse. For example, many companies may have a data mart that aligns with a specific department in the business, such as finance, sales, or marketing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, different data marts may exist depending on the areas of study we are interested in.&lt;/p&gt;
&lt;h1 id=&#34;olap-and-oltp--two-useful-tools&#34;&gt;OLAP and OLTP : two useful tools&lt;/h1&gt;
&lt;p&gt;We could conceptually summarize what OLAP and OLTP are with a &lt;strong&gt;simple question&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;in the case of OLAP we would ask &amp;ldquo;&lt;strong&gt;what will happen?&lt;/strong&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;in the case of OLTP we would ask &amp;ldquo;&lt;strong&gt;what is happening?&lt;/strong&gt;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;definition-of-olap&#34;&gt;Definition of OLAP:&lt;/h1&gt;
&lt;p&gt;OLAP stands for: 
&lt;strong&gt;On-Line Analytical Processsing&lt;/strong&gt;.
We can see it as a set of &lt;strong&gt;software&lt;/strong&gt; techniques that allows to analyze a large amount of collected data and it is the basic technology of &lt;strong&gt;data warehouse&lt;/strong&gt;. Companies use it to &lt;strong&gt;predict&lt;/strong&gt; sales results, cost trends, results of marketing and communication campaigns, organize survey data and other similar cases. We can therefore summarize everything in the fact that the OLAP analysis system is one of the tools that can allow you to make &lt;strong&gt;business decisions&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;definition-of-oltp&#34;&gt;Definition of OLTP:&lt;/h1&gt;
&lt;p&gt;OLTP stands for:
&lt;strong&gt;On-Line Transaction Processsing&lt;/strong&gt;.
we can see it as a set of &lt;strong&gt;software&lt;/strong&gt; techniques that are
used to manage &lt;strong&gt;transaction-oriented&lt;/strong&gt; applications. It is popular in financial transactions, retail sales, and customer relationship management (CRM). Booking airline tickets online, online banking, online shopping are practical examples of systems based on the use of OLTP. OLTP is used to &lt;strong&gt;record&lt;/strong&gt; insertion, &lt;strong&gt;update&lt;/strong&gt; and &lt;strong&gt;deletion&lt;/strong&gt; of data during a transaction. So, as you can imagine these operations in order to ensure reliability must be &lt;strong&gt;atomic&lt;/strong&gt;. Also, OLTP queries are simpler and shorter and thus require less time in processing and less storage space. A key aspect is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;we can see OLTP as the data source for OLAP.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;olap-vs-oltp&#34;&gt;OLAP vs OLTP:&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;OLAP tools differ from OLTPs in that the former aim to find and achieve queries that are as complex as possible; the latter, on the other hand, aim to ensure integrity and security of transactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below is a list of other substantial differences between the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLTP is an online transaction system instead OLAP is an online data retrieval and analysis system;
online transaction data is the data source for OLTP;&lt;/li&gt;
&lt;li&gt;OLTP&amp;rsquo;s main operations are inserting, updating and deleting data while OLAP&amp;rsquo;s main operation is extracting complex data for later analysis;&lt;/li&gt;
&lt;li&gt;OLAP has a long and less frequent transaction while OLTP has short but frequent transactions;
OLTP&amp;rsquo;s response times are much faster than OLAP as it deals with short transactions.&lt;/li&gt;
&lt;li&gt;OLAP queries are very complex compared to OLTP, as they deal with a much larger amount of data and are also more structured.&lt;/li&gt;
&lt;li&gt;OLAP databases are not changed frequently, so data integrity is not affected. OLTP databases, on the other hand, are changed frequently, so it is important to maintain data integrity.&lt;/li&gt;
&lt;li&gt;OLAP is used for planning and decision making while OLTP is used for controlling and executing key business activities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bucap.it/news/approfondimenti-tematici/gestione-del-magazzino/database-data-warehouse-principali-differenze.htm#:~:text=Il%20primo%20obiettivo%20del%20database,di%20dati%20a%20fini%20analitici.&#34;&gt;Difference between database and data warehouse&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.businessintelligencegroup.it/olap-e-oltp-cosa-sono-e-quali-sono-le-principali-differenze/&#34;&gt;OLAP e OLTP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>1_A</title>
      <link>https://lucarep.github.io/post/1_a/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/1_a/</guid>
      <description>Intro in this assignment, I had to code a form in C# and VB.NET that firstly by pressing a button would show a text, secondly another button would animate a little ball in a rectangle.
Live Demo here, you can see my program in action   C# code: using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Drawing.Drawing2D; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace _1_R { public partial class Form1 : System.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;in this assignment, I had to code a form in &lt;strong&gt;C#&lt;/strong&gt; and &lt;strong&gt;VB.NET&lt;/strong&gt; that firstly by pressing a button would show a text, secondly another button would animate a little ball in a rectangle.&lt;/p&gt;
&lt;h1 id=&#34;live-demo&#34;&gt;Live Demo&lt;/h1&gt;
&lt;p&gt;here, you can see my program in action

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Z-dVPitpOpA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;c-code&#34;&gt;C# code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.ComponentModel;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Data;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Drawing;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Drawing.Drawing2D;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Windows.Forms;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; _1_R
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : System.Windows.Forms.Form
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Ball params
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ballWidth = &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ballHeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ballX, ballY;   &lt;span style=&#34;color:#75715e&#34;&gt;// Position.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ballVx, ballVy; &lt;span style=&#34;color:#75715e&#34;&gt;// Velocity.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
        {
            InitializeComponent();
            Random rnd = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random();
            ballVx = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
            ballVy = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
            ballX = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, panel1.Width - ballWidth);
            ballY = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, panel1.Height - ballHeight);

            &lt;span style=&#34;color:#75715e&#34;&gt;// Use double buffering to reduce flicker.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.SetStyle(
                ControlStyles.AllPaintingInWmPaint |
                ControlStyles.UserPaint |
                ControlStyles.DoubleBuffer,
                &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateStyles();
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            richTextBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button2_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {

            timer1.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
            button3.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button3_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            timer1.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tmrMoveBall_Tick(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
        {
            ballX += ballVx;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ballX &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            {
                ballVx = -ballVx;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ballX + ballWidth &amp;gt; panel1.Width)
            {
                ballVx = -ballVx;
            }

            ballY += ballVy;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ballY &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            {
                ballVy = -ballVy;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ballY + ballHeight &amp;gt; panel1.Height)
            {
                ballVy = -ballVy;
            }

            Refresh();
   
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; panel1_Paint(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, PaintEventArgs e)
        {
            
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
            e.Graphics.Clear(BackColor);
            e.Graphics.FillEllipse(Brushes.Blue, ballX, ballY,
                ballWidth, ballHeight);
            e.Graphics.DrawEllipse(Pens.Black, ballX, ballY,
                ballWidth, ballHeight);
            
        }  
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vbnet-code&#34;&gt;VB.NET code:&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;Imports System
Imports System.Drawing.Drawing2D
Imports System.Windows.Forms

Namespace &lt;span style=&#34;color:#ae81ff&#34;&gt;_1_&lt;/span&gt;R
    Public Partial Class Form1
        Inherits System.Windows.Forms.Form

        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; Ball &lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt;
        Private Const ballWidth As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
        Private Const ballHeight As Integer = &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
        Private ballX, ballY As Integer   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; Position.
        Private ballVx, ballVy As Integer &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; Velocity.
        Public Sub New()
            InitializeComponent()
            Dim rnd As Random = New Random()
            ballVx = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            ballVy = rnd.Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            ballX = rnd.[Next](&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, panel1.Width - ballWidth)
            ballY = rnd.[Next](&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, panel1.Height - ballHeight)

            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; Use &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; buffering to reduce flicker.
            Me.SetStyle(ControlStyles.AllPaintingInWmPaint Or ControlStyles.UserPaint Or ControlStyles.DoubleBuffer, True)
            Me.UpdateStyles()
        End Sub

        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            richTextBox1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            timer1.Enabled = True
            button3.Enabled = True
        End Sub

        Private Sub button3_Click(ByVal sender As Object, ByVal e As EventArgs)
            timer1.Enabled = False
        End Sub

        Private Sub tmrMoveBall_Tick(ByVal sender As Object, ByVal e As EventArgs)
            ballX += ballVx

            If ballX &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Then
                ballVx = -ballVx
            ElseIf ballX + ballWidth &amp;gt; panel1.Width Then
                ballVx = -ballVx
            End If

            ballY += ballVy

            If ballY &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Then
                ballVy = -ballVy
            ElseIf ballY + ballHeight &amp;gt; panel1.Height Then
                ballVy = -ballVy
            End If

            Refresh()
        End Sub

        Private Sub panel1_Paint(ByVal sender As Object, ByVal e As PaintEventArgs)
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias
            e.Graphics.Clear(BackColor)
            e.Graphics.FillEllipse(Brushes.Blue, ballX, ballY, ballWidth, ballHeight)
            e.Graphics.DrawEllipse(Pens.Black, ballX, ballY, ballWidth, ballHeight)
        End Sub
    End Class
End Namespace

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;download-source-code&#34;&gt;Download source code:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1SBdx-20JgMME0kulsV8DzW57xuqW1q1v/view?usp=sharing&#34;&gt;click here&lt;/a&gt; 📥&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>1_R : LET&#39;S TALK ABOUT STATISTICS</title>
      <link>https://lucarep.github.io/post/1_r/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/1_r/</guid>
      <description>What is statistics? 📊  &amp;ldquo;If a 30 year old man has his head in an oven and his feet in ice, a statistician would say that on average he feels fine.&amp;rdquo;
 There are tons of data out there and all those numbers alone don&amp;rsquo;t make much sense, this is where the statistics comes in, in statistics we carry out analysis, interpretation, organization and presentation of this data, so informed decision can be made.</description>
      <content>&lt;h1 id=&#34;what-is-statistics-&#34;&gt;What is statistics? 📊&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If a 30 year old man has his head in an oven and his feet in ice, a statistician would say that on average he feels fine.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are tons of data out there and all those numbers alone don&amp;rsquo;t make much sense, this is where the statistics comes in, in statistics we carry out &lt;strong&gt;analysis, interpretation, organization and presentation of this data&lt;/strong&gt;, so informed decision can be made. A trivial example that we can observe every day are the weather forecasts, to make this forecasts statisticians create computer models based on previous weather reports. But statistics is literally &lt;strong&gt;everywhere&lt;/strong&gt;, here&amp;rsquo;s an example of some of the sectors that use it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pharmaceutical Industry&lt;/li&gt;
&lt;li&gt;Food Industry&lt;/li&gt;
&lt;li&gt;Plants&lt;/li&gt;
&lt;li&gt;Designer Brands&lt;/li&gt;
&lt;li&gt;Computers&lt;/li&gt;
&lt;li&gt;Insurance&lt;/li&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Medicine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, in this historical moment we all know unfortunately that there&amp;rsquo;s a pandemic of &lt;strong&gt;Covid-19&lt;/strong&gt; in progress, even here the statistics play a &lt;strong&gt;key role&lt;/strong&gt;, as you can make estimates of how many contagions there may be in the future, given the current contagions. Take &lt;strong&gt;Covid vaccines&lt;/strong&gt; also as an example, did you know that pharmaceutical companies like &lt;strong&gt;Pfizer&lt;/strong&gt; employ many statisticians? Here they analyze the results conducted in preclinical research and clinical trials,
to help then develop a vaccine that is &lt;strong&gt;safe and effective&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;is-statistics-a-science-a-branch-of-mathematics-or-both-&#34;&gt;Is statistics a science, a branch of mathematics or both? 🤔&lt;/h1&gt;
&lt;p&gt;We can summarize the above with a quote from American Statistical Association:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Statistics is the science of learning from data, and of measuring, controlling and communicating &lt;strong&gt;uncertainty&lt;/strong&gt;.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;also, John Turkey (author of Exploratory Dat Analysis) said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Statistics is a science, not a branch of mathematics, but it uses mathematical models as essential tools.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;What’s the difference?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The primary difference between the two is &lt;strong&gt;uncertainty&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Consider two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How far is it to work in miles?&lt;/li&gt;
&lt;li&gt;How far is it to work in minutes?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first problem is a math problem because, assuming you take the same route, the answer is fixed. The second problem is a statistical problem because you will not always get the same answer due to weather or traffic conditions, how many lights you get stuck at etc., there is a level of uncertainty.&lt;/p&gt;
&lt;p&gt;Now in order to understand statistics you do need to know probability which is a branch of mathematics (The study of finite measures that a normalized to 1). But probability is not statistics anymore than algebra is physics.&lt;/p&gt;
&lt;h6 id=&#34;also-what-defines-a-scientific-field&#34;&gt;Also, what defines a scientific field?&lt;/h6&gt;
&lt;p&gt;Every field of scientific inquiry is defined by &lt;strong&gt;three things&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What it studies: Statistics is the study of uncertainty. More specifically, it is the science of probability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why it studies the What: The outcomes of any and every natural process vary in random, yet understandable, ways (i.e. Natural Variation). Statistics examines and specifies these patterns of randomness. By understanding natural variation, we are able to identify occurrences of unnatural variation and seek their underlying cause.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How it studies the What: Like many sciences, mathematics is the formal language of statistics. However, it is not its only tool. Statistics also uses computers for both simulation and analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, many people view statistics as a branch of mathematics, in many ways this is true, because its origins lie within mathematics. However, it have evolved past that and is its own independent field of inquiry.&lt;/p&gt;
&lt;h6 id=&#34;credits&#34;&gt;Credits&lt;/h6&gt;
&lt;p&gt;I want to thank and mention some resources that I found particularly helpful in the writing of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aveea : What is Statistics? (and what can you do with it) 
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/M6MKQ88LpFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kenneth Ganning (Ph.D Statistics), Thom Flottemesch (Ph.D Statistics) :  &lt;a href=&#34;https://www.quora.com/What-is-statistics-a-science-of&#34;&gt;What is statistics a science of?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>MY FIRST POST</title>
      <link>https://lucarep.github.io/post/hello/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucarep.github.io/post/hello/</guid>
      <description>Hello there, this is my first blog post. I don&amp;rsquo;t have much to say about this, but I invite you to stay tuned because in the coming days will come out many articles.
 Also, there will be two categories of post here:
 Researches about theory (R) Applications / Practice (A)  So, keep in mind which one of the two letters the post contains, because it is to specify at a glance its type.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Hello there, this is my first blog post. I don&amp;rsquo;t have much to say about this, but I invite you to &lt;strong&gt;stay tuned&lt;/strong&gt; because in the coming days will come out many articles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also, there will be two categories of post here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Researches about theory (&lt;strong&gt;R&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Applications / Practice (&lt;strong&gt;A&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, keep in mind which one of the two letters the post contains, because it is to specify at a glance its type.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1_R&lt;/strong&gt; its a possible title of a post about Research&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1_A&lt;/strong&gt; its a possible title of a post about Applications / Practice&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
